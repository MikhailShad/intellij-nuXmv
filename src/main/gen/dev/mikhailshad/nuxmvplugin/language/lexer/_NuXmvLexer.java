// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: nuXmv.flex

/* JFlex specification for nuXmv lexer */

package dev.mikhailshad.nuxmvplugin.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static dev.mikhailshad.nuxmvplugin.language.psi.NuXmvTypes.*;


class _NuXmvLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int IN_BLOCK_COMMENT = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\37\u0100\1\u0200\u10df\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\0\1\2\22\0\1\3\1\4" +
                    "\1\0\2\5\1\0\1\6\1\0\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\10\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\43" +
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\0\1\63\1\0\1\64\1\0\1\65" +
                    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75" +
                    "\1\43\1\76\1\77\1\100\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\1\110\1\43\1\111\1\112\1\113" +
                    "\1\114\1\115\1\116\1\117\1\120\u019a\0\1\121\346\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[768];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\1\1\24\3\25\1\26" +
                    "\1\27\1\30\1\31\10\25\1\32\1\33\1\34\1\35" +
                    "\1\25\1\36\1\37\1\40\1\41\1\42\21\25\1\43" +
                    "\1\44\1\45\2\46\1\47\1\50\1\51\1\52\1\53" +
                    "\2\0\2\54\1\0\1\55\1\56\1\0\1\57\1\60" +
                    "\1\61\1\62\3\0\1\25\1\63\1\64\1\25\1\65" +
                    "\1\66\5\25\1\67\1\70\1\71\3\25\1\0\1\72" +
                    "\43\25\1\73\1\74\5\25\1\75\16\25\1\0\1\76" +
                    "\1\77\1\0\1\100\1\0\1\101\1\102\1\103\1\0" +
                    "\1\104\1\105\6\25\1\106\1\107\3\25\1\110\1\0" +
                    "\2\25\1\111\5\25\1\112\1\25\1\113\11\25\1\114" +
                    "\6\25\1\115\1\25\1\116\3\25\1\0\4\25\1\117" +
                    "\2\25\1\120\4\25\1\121\1\122\1\123\2\25\1\124" +
                    "\4\25\1\125\3\25\1\126\7\25\1\127\1\130\1\100" +
                    "\2\0\12\25\1\0\1\131\2\25\1\132\10\25\1\133" +
                    "\4\25\1\134\1\25\1\135\1\25\1\136\2\25\1\137" +
                    "\1\140\1\25\1\141\2\0\1\142\1\143\1\144\2\25" +
                    "\1\145\2\25\1\146\1\25\1\147\1\25\1\150\1\25" +
                    "\1\151\2\25\1\152\6\25\1\153\1\154\1\155\1\0" +
                    "\10\25\1\156\2\25\1\157\1\25\1\160\1\161\1\162" +
                    "\16\25\1\163\1\25\1\164\1\165\2\0\1\25\1\166" +
                    "\1\167\1\25\1\170\7\25\1\171\1\172\2\25\1\173" +
                    "\1\0\1\174\1\25\1\175\5\25\1\176\1\177\2\25" +
                    "\1\0\4\25\1\200\1\25\1\201\1\202\7\25\1\203" +
                    "\2\0\1\25\1\204\2\25\1\205\1\206\1\207\5\25" +
                    "\1\0\1\25\1\210\1\211\2\25\1\212\3\25\1\213" +
                    "\1\214\1\215\1\216\1\217\1\220\1\221\2\25\1\222" +
                    "\1\223\1\224\1\225\1\25\1\0\1\226\3\25\1\227" +
                    "\1\0\3\25\1\230\2\25\1\231\2\25\1\0\2\25" +
                    "\1\232\1\0\1\25\1\233\1\25\1\234\1\235\2\25" +
                    "\1\0\2\25\2\0\1\236\1\237\1\240\1\25\1\0" +
                    "\1\241\1\242\2\0\1\25\1\243\1\0\1\244\1\25" +
                    "\1\0\1\245\1\246";

    private static int[] zzUnpackAction() {
        int[] result = new int[505];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\122\0\244\0\366\0\u0148\0\244\0\244\0\244" +
                    "\0\244\0\244\0\244\0\u019a\0\u01ec\0\u023e\0\u0290\0\u02e2" +
                    "\0\u0334\0\244\0\u0386\0\244\0\u03d8\0\244\0\u042a\0\u047c" +
                    "\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u0668\0\u06ba" +
                    "\0\u070c\0\u0668\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8" +
                    "\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0668\0\u0668\0\u0668\0\244" +
                    "\0\244\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e" +
                    "\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e" +
                    "\0\u0f60\0\u0fb2\0\244\0\244\0\244\0\244\0\u1004\0\244" +
                    "\0\u1056\0\u10a8\0\244\0\244\0\u10fa\0\u114c\0\u119e\0\u11f0" +
                    "\0\u1242\0\244\0\244\0\u1294\0\244\0\244\0\244\0\244" +
                    "\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u0668\0\u0668\0\u142e\0\u0668" +
                    "\0\u0668\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u0668\0\u0668" +
                    "\0\u0668\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806" +
                    "\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96" +
                    "\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26" +
                    "\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6" +
                    "\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246" +
                    "\0\u2298\0\u22ea\0\u0668\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484" +
                    "\0\u0668\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2" +
                    "\0\u2714\0\u2766\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952" +
                    "\0\244\0\u114c\0\u29a4\0\u29f6\0\u2a48\0\244\0\244\0\244" +
                    "\0\u2a9a\0\u0668\0\u0668\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34" +
                    "\0\u2c86\0\u0668\0\u0668\0\u2cd8\0\u2d2a\0\u2d7c\0\u0668\0\u2dce" +
                    "\0\u2e20\0\u2e72\0\u0668\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c" +
                    "\0\u0668\0\u305e\0\u0668\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8" +
                    "\0\u324a\0\u329c\0\u32ee\0\u3340\0\u0668\0\u3392\0\u33e4\0\u3436" +
                    "\0\u3488\0\u34da\0\u352c\0\u0668\0\u357e\0\u0668\0\u35d0\0\u3622" +
                    "\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u0668\0\u3860" +
                    "\0\u38b2\0\u0668\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u0668\0\u0668" +
                    "\0\u0668\0\u3a4c\0\u3a9e\0\u0668\0\u3af0\0\u3b42\0\u3b94\0\u3be6" +
                    "\0\u0668\0\u3c38\0\u3c8a\0\u3cdc\0\u0668\0\u3d2e\0\u3d80\0\u3dd2" +
                    "\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a\0\u0668\0\244\0\u29a4\0\u3f6c" +
                    "\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc" +
                    "\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u0668\0\u4396\0\u43e8\0\u0668" +
                    "\0\u443a\0\u448c\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626\0\u4678" +
                    "\0\u0668\0\u46ca\0\u471c\0\u476e\0\u47c0\0\u0668\0\u4812\0\u0668" +
                    "\0\u4864\0\u0668\0\u48b6\0\u4908\0\u0668\0\u0668\0\u495a\0\u0668" +
                    "\0\u49ac\0\u49fe\0\u0668\0\u4a50\0\u0668\0\u4aa2\0\u4af4\0\u0668" +
                    "\0\u4b46\0\u4b98\0\u0668\0\u4bea\0\u0668\0\u4c3c\0\u0668\0\u4c8e" +
                    "\0\u0668\0\u4ce0\0\u4d32\0\u0668\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a" +
                    "\0\u4ecc\0\u4f1e\0\u4f70\0\u0668\0\u3f6c\0\u4fc2\0\u5014\0\u5066" +
                    "\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u0668\0\u52a4" +
                    "\0\u52f6\0\u0668\0\u5348\0\u539a\0\u53ec\0\u0668\0\u543e\0\u5490" +
                    "\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u562a\0\u567c\0\u56ce\0\u5720" +
                    "\0\u5772\0\u57c4\0\u5816\0\u5868\0\u0668\0\u58ba\0\u0668\0\u0668" +
                    "\0\u590c\0\u595e\0\u59b0\0\u0668\0\u0668\0\u5a02\0\u0668\0\u5a54" +
                    "\0\u5aa6\0\u5af8\0\u5b4a\0\u5b9c\0\u5bee\0\u5c40\0\u0668\0\u0668" +
                    "\0\u5c92\0\u5ce4\0\u0668\0\u5d36\0\u0668\0\u5d88\0\u0668\0\u5dda" +
                    "\0\u5e2c\0\u5e7e\0\u5ed0\0\u5f22\0\u0668\0\u0668\0\u5f74\0\u5fc6" +
                    "\0\u6018\0\u606a\0\u60bc\0\u610e\0\u6160\0\u0668\0\u61b2\0\u0668" +
                    "\0\u0668\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0" +
                    "\0\u0668\0\u6442\0\u6494\0\u64e6\0\u0668\0\u6538\0\u658a\0\u0668" +
                    "\0\u65dc\0\u0668\0\u662e\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8" +
                    "\0\u681a\0\u0668\0\u0668\0\u686c\0\u68be\0\u0668\0\u6910\0\u6962" +
                    "\0\u69b4\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668\0\u0668" +
                    "\0\u6a06\0\u6a58\0\u0668\0\u0668\0\u0668\0\u0668\0\u6aaa\0\u6afc" +
                    "\0\u0668\0\u6b4e\0\u6ba0\0\u6bf2\0\u0668\0\u6c44\0\u6c96\0\u6ce8" +
                    "\0\u6d3a\0\u0668\0\u6d8c\0\u6dde\0\u0668\0\u6e30\0\u6e82\0\u6ed4" +
                    "\0\u6f26\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u0668\0\u70c0\0\u0668" +
                    "\0\u0668\0\u7112\0\u7164\0\u71b6\0\u7208\0\u725a\0\u72ac\0\u72fe" +
                    "\0\u0668\0\u0668\0\u0668\0\u7350\0\u73a2\0\u0668\0\u0668\0\u73f4" +
                    "\0\u7446\0\u7498\0\244\0\u74ea\0\244\0\u753c\0\u758e\0\u0668" +
                    "\0\244";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[505];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\3\4\1\5\1\3\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\2\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\37\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60" +
                    "\1\61\1\42\1\62\1\63\1\64\1\42\1\65\1\66" +
                    "\2\42\1\67\1\42\1\70\1\71\1\72\1\73\1\74" +
                    "\1\42\1\75\1\76\1\77\1\100\1\101\1\102\2\42" +
                    "\1\103\1\104\1\105\2\3\14\106\1\107\105\106\123\0" +
                    "\3\4\143\0\1\110\110\0\1\111\2\0\3\112\4\0" +
                    "\1\113\110\0\1\114\120\0\1\115\122\0\1\116\1\0" +
                    "\3\20\7\0\4\117\1\120\1\117\26\0\4\117\1\120" +
                    "\1\117\13\0\1\121\1\0\1\121\26\0\1\116\1\0" +
                    "\3\20\7\0\4\117\1\120\1\117\26\0\4\117\1\120" +
                    "\1\117\51\0\1\122\2\0\1\123\110\0\1\124\7\0" +
                    "\1\125\1\126\121\0\1\127\1\130\131\0\1\131\10\0" +
                    "\1\132\3\0\1\133\53\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\1\42\1\134\3\42\1\135\1\136\12\42" +
                    "\1\137\4\42\1\140\2\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\23\42\1\141\5\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\16\42\1\142\3\42\1\143\6\42\2\0\13\42" +
                    "\1\144\15\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\4\42\1\145\24\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\1\42\1\146\3\42" +
                    "\1\147\1\150\17\42\1\151\2\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\1\152\17\42" +
                    "\1\153\2\42\1\154\5\42\2\0\31\42\4\0\1\155" +
                    "\5\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\15\42\1\156\3\42\1\157\1\160\1\42\1\161" +
                    "\4\42\2\0\15\42\1\162\13\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\23\42\1\163\5\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\22\42\1\164\6\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\1\165\2\42\1\166\4\42" +
                    "\1\167\5\42\1\170\12\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\1\171\3\42\1\172" +
                    "\24\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\1\173\17\42\1\174\1\175\7\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\5\42\1\176\23\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\1\177\7\42\1\200\6\42" +
                    "\1\201\11\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\20\42\1\202\10\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\20\42" +
                    "\1\203\10\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\1\204\30\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\16\42\1\205\12\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\2\42\1\206\1\207\15\42" +
                    "\1\210\1\211\1\212\5\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\16\42\1\213\12\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\1\42\1\214\11\42\1\215\2\42\1\216\12\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\22\42\1\217\3\42\1\220\2\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\13\42" +
                    "\1\221\15\42\4\0\1\155\5\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\15\42\1\222\13\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\15\42\1\223\13\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\1\42\1\224\7\42" +
                    "\1\225\4\42\1\226\12\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\5\42\1\227\10\42" +
                    "\1\230\12\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\6\42\1\231\22\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\16\42" +
                    "\1\232\12\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\5\42\1\233\23\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\5\42" +
                    "\1\234\3\42\1\235\6\42\1\236\4\42\1\237\3\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\1\42\1\240\7\42\1\241\4\42\1\242\12\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\15\42\1\243\7\42\1\244\3\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\16\42" +
                    "\1\245\12\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\15\42\1\246\1\247\12\42\21\0" +
                    "\1\250\105\0\2\111\1\0\117\111\17\0\3\112\114\0" +
                    "\1\251\124\0\3\252\117\0\3\117\7\0\6\117\26\0" +
                    "\6\117\43\0\1\253\2\0\3\254\7\0\6\117\26\0" +
                    "\6\117\61\0\1\255\1\0\1\255\3\0\1\255\6\0" +
                    "\1\255\16\0\1\255\1\0\1\255\3\0\1\255\5\0" +
                    "\1\255\45\0\1\256\213\0\1\257\121\0\1\260\42\0" +
                    "\1\261\65\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\5\42\1\262\1\263\22\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\21\42\1\264\7\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\14\42\1\265\1\266\13\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\13\42\1\267" +
                    "\15\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\270\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\5\42\1\271" +
                    "\23\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\5\42\1\272\1\273\22\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\10\42" +
                    "\1\274\2\42\1\275\15\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\16\42\1\276\12\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\15\42\1\277\13\42\2\0\31\42\24\0\3\300" +
                    "\105\0\1\42\6\0\1\42\2\0\3\42\7\0\10\42" +
                    "\1\301\13\42\1\302\4\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\1\303\30\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\27\42\1\304\1\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\1\305\30\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\23\42\1\306\5\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\21\42\1\307\7\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\13\42" +
                    "\1\310\15\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\26\42\1\311\2\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\4\42" +
                    "\1\312\24\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\15\42\1\313\2\42\1\314\10\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\3\42\1\315\11\42\1\316\13\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\14\42" +
                    "\1\317\14\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\26\42\1\320\2\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\20\42" +
                    "\1\321\10\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\4\42\1\322\24\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\13\42" +
                    "\1\323\15\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\1\42\1\324\27\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\22\42" +
                    "\1\325\6\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\14\42\1\326\14\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\4\42" +
                    "\1\327\24\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\1\330\22\42\1\331\5\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\6\42\1\332\22\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\13\42\1\333\4\42\1\334" +
                    "\10\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\21\42\1\335\7\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\22\42\1\336\6\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\337\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\21\42\1\340\7\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\11\42\1\341\17\42\10\0" +
                    "\1\342\1\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\1\42\1\343\27\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\16\42\1\344" +
                    "\12\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\22\42\1\345\6\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\16\42\1\346" +
                    "\12\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\22\42\1\347\1\42\1\350\4\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\1\42\1\351\27\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\17\42\1\352\3\42\1\353" +
                    "\5\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\16\42\1\354\12\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\11\42\1\355" +
                    "\11\42\1\356\5\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\26\42\1\357\2\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\360\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\4\42\1\361\24\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\26\42\1\362\2\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\15\42\1\363\13\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\25\42\1\364\3\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\1\42\1\365\20\42\1\366" +
                    "\6\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\13\42\1\367\15\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\7\42\1\370" +
                    "\5\42\1\371\12\42\1\372\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\21\42\1\373\7\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\3\42\1\374\25\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\15\42\1\375\13\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\14\42\1\376\14\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\11\42\1\377\17\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\11\42\1\u0100\10\42\1\u0101\6\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\3\42" +
                    "\1\u0102\25\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\21\42\1\u0103\7\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\16\42" +
                    "\1\u0104\12\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\21\42\1\u0105\7\42\23\0\1\u0106" +
                    "\122\0\3\u0107\117\0\3\254\7\0\6\117\26\0\6\117" +
                    "\46\0\3\255\42\0\1\u0108\102\0\1\u0109\61\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\10\42\1\u010a\20\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\17\42\1\u010b\11\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\21\42\1\u010c\7\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\21\42\1\u010d\3\42\1\u010e\3\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\3\42\1\u010f\25\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\10\42\1\u0110\20\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\20\42" +
                    "\1\u0111\10\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\21\42\1\u0112\7\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\30\42" +
                    "\1\u0113\2\0\31\42\23\0\1\u0114\3\300\105\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\22\42\1\u0115\6\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\1\u0116\30\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\17\42\1\u0117\11\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\20\42\1\u0118\10\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\5\42\1\u0119" +
                    "\23\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\22\42\1\u011a\6\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\21\42\1\u011b\3\42\1\u011c" +
                    "\3\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\5\42\1\u011d\23\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\20\42\1\u011e" +
                    "\10\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\23\42\1\u011f\5\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\16\42\1\u0120" +
                    "\12\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\4\42\1\u0121\24\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\22\42\1\u0122" +
                    "\6\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\21\42\1\u0123\7\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\3\42\1\u0124" +
                    "\25\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\21\42\1\u0125\7\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\13\42\1\u0126\15\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\17\42\1\u0127\11\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\2\42\1\u0128" +
                    "\26\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\15\42\1\u0129\13\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\4\42\1\u012a" +
                    "\24\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\4\42\1\u012b\24\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\10\42\1\u012c" +
                    "\20\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\4\42\1\u012d\24\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\22\42\1\u012e\6\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\1\42\1\u012f\27\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u0130\13\42\104\0\1\u0131\1\0\1\u0132\25\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u0133\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\13\42\1\u0134\15\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\5\42\1\u0135\23\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\3\42\1\u0136\25\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u0137\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\3\42\1\u0138\25\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\5\42\1\u0139\23\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\u013a\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\23\42\1\u013b\5\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\5\42\1\u013c\23\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\23\42\1\u013d\5\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\3\42\1\u013e\25\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\13\42\1\u013f\15\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\11\42\1\u0140\17\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\6\42\1\u0141\22\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\15\42\1\u0142\13\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\5\42\1\u0143\23\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\23\42\1\u0144\5\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\16\42\1\u0145\12\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\5\42\1\u0146\23\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u0147\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\u0148\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\11\42\1\u0149\17\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\u014a\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\4\42\1\u014b\24\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\21\42\1\u014c\7\42\24\0" +
                    "\3\u014d\7\0\6\u014d\26\0\6\u014d\64\0\1\u014e\71\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\6\42\1\u014f" +
                    "\22\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\1\u0150\7\42\1\u0151\12\42\1\u0152\1\42" +
                    "\1\u0153\3\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\22\42\1\u0154\6\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\17\42" +
                    "\1\u0155\11\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\5\42\1\u0156\23\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\12\42\1\u0157\16\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\15\42\1\u0158\13\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\15\42" +
                    "\1\u0159\13\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\4\42\1\u015a\24\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\4\42" +
                    "\1\u015b\24\42\2\0\31\42\24\0\3\u015c\105\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\20\42\1\u015d\10\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\4\42\1\u015e\24\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\7\42" +
                    "\1\u015f\21\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\10\42\1\u0160\20\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\17\42\1\u0161\11\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\5\42\1\u0162\23\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\10\42\1\u0163\20\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\16\42\1\u0164\12\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\13\42\1\u0165\15\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\15\42\1\u0166\1\42\1\u0167\11\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\25\42" +
                    "\1\u0168\3\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\27\42\1\u0169\1\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\10\42" +
                    "\1\u016a\20\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\17\42\1\u016b\11\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\25\42" +
                    "\1\u016c\3\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\21\42\1\u016d\7\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\15\42" +
                    "\1\u016e\13\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\3\42\1\u016f\25\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\27\42\1\u0170\1\42\72\0\1\u0171\125\0\1\u0172" +
                    "\35\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\5\42\1\u0173\23\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\12\42\1\u0174\16\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\23\42\1\u0175\5\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\15\42\1\u0176\13\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\21\42\1\u0177\7\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\7\42\1\u0178\21\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\16\42\1\u0179\12\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\30\42\1\u017a\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\5\42\1\u017b\23\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\16\42\1\u017c\12\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u017d\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\1\u017e\30\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\23\42" +
                    "\1\u017f\5\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\15\42\1\u0180\13\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\7\42" +
                    "\1\u0181\21\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\15\42\1\u0182\13\42\12\0\1\42" +
                    "\6\0\1\42\2\0\1\42\1\u0183\1\42\7\0\31\42" +
                    "\2\0\31\42\10\0\1\u0184\123\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\15\42\1\u0185\13\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\21\42" +
                    "\1\u0186\7\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\3\42\1\u0187\25\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\22\42" +
                    "\1\u0188\6\42\2\0\31\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\5\42\1\u0189\23\42\2\0\31\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\1\u018a" +
                    "\17\42\1\u018b\10\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\4\42\1\u018c\24\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\5\42\1\u018d\23\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\4\42\1\u018e\24\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\4\42\1\u018f\24\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\15\42\1\u0190\13\42\2\0" +
                    "\31\42\24\0\3\u015c\13\0\1\u0191\33\0\1\u0191\35\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\21\42\1\u0192" +
                    "\7\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\5\42\1\u0193\23\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\2\42\1\u0194" +
                    "\26\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\4\42\1\u0195\24\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\5\42\1\u0196" +
                    "\23\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\15\42\1\u0197\13\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\20\42\1\u0198" +
                    "\10\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\4\42\1\u0199\24\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\4\42\1\u019a" +
                    "\24\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\16\42\1\u019b\12\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\5\42\1\u019c" +
                    "\23\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\15\42\1\u019d\13\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\2\42\1\u019e" +
                    "\26\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\4\42\1\u019f\24\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\5\42\1\u01a0" +
                    "\23\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\22\42\1\u01a1\6\42\2\0\31\42\113\0" +
                    "\1\u01a2\125\0\1\u01a3\14\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\1\42\1\u01a4\27\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\4\42\1\u01a5\24\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\5\42\1\u01a6\23\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\15\42\1\u01a7\13\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\5\42\1\u01a8\23\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\4\42\1\u01a9\24\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\6\42\1\u01aa\22\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\22\42\1\u01ab\6\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\31\42\2\0\22\42\1\u01ac\1\42\1\u01ad" +
                    "\4\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\15\42\1\u01ae\13\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\22\42\1\u01af" +
                    "\6\42\41\0\1\u01b0\72\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\21\42\1\u01b1\7\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\4\42\1\u01b2" +
                    "\24\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\5\42\1\u01b3\23\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\15\42\1\u01b4" +
                    "\13\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\1\u01b5\30\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\2\42\1\u01b6\26\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\21\42\1\u01b7\7\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\24\42\1\u01b8\4\42" +
                    "\2\0\31\42\21\0\1\253\2\0\3\u0107\105\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\17\42\1\u01b9\11\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\21\42\1\u01ba\7\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\4\42\1\u01bb\24\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\2\42\1\u01bc\26\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\4\42\1\u01bd\24\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\6\42\1\u01be\22\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\21\42\1\u01bf\7\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\5\42\1\u01c0\23\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\22\42\1\u01c1\6\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\1\u01c2\30\42\2\0\31\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\2\42\1\u01c3\26\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\5\42\1\u01c4\23\42\2\0\31\42\114\0\1\260\121\0" +
                    "\1\257\17\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\15\42\1\u01c5\13\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\21\42\1\u01c6" +
                    "\7\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\23\42\1\u01c7\5\42\10\0\1\u01c8\1\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\31\42\2\0" +
                    "\31\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\23\42\1\u01c9\5\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\11\42\1\u01ca" +
                    "\17\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\15\42\1\u01cb\13\42\12\0\1\42\6\0" +
                    "\1\42\2\0\3\42\7\0\31\42\2\0\5\42\1\u01cc" +
                    "\23\42\12\0\1\42\6\0\1\42\2\0\3\42\7\0" +
                    "\31\42\2\0\23\42\1\u01cd\5\42\54\0\1\u01ce\57\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\10\42\1\u01cf" +
                    "\20\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\22\42\1\u01d0\6\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\10\42\1\u01d1" +
                    "\20\42\2\0\31\42\12\0\1\42\6\0\1\42\2\0" +
                    "\3\42\7\0\21\42\1\u01d2\7\42\2\0\31\42\12\0" +
                    "\1\42\6\0\1\42\2\0\3\42\7\0\1\u01d3\30\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\4\42\1\u01d4\24\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\7\42\1\u01d5\21\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\22\42\1\u01d6\6\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\11\42" +
                    "\1\u01d7\17\42\116\0\1\u01d8\15\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\15\42\1\u01d9\13\42" +
                    "\12\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\23\42\1\u01da\5\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\4\42\1\u01db\24\42" +
                    "\52\0\1\u01dc\61\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\16\42\1\u01dd\12\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\21\42\1\u01de\7\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\15\42\1\u01df\13\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\20\42\1\u01e0\10\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\2\42\1\u01e1\26\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\4\42\1\u01e2\24\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\15\42\1\u01e3\13\42\107\0\1\u01e4" +
                    "\24\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\3\42\1\u01e5\25\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\11\42\1\u01e6\17\42" +
                    "\10\0\1\u01e7\1\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\31\42\36\0\1\u01e8\75\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\15\42\1\u01e9\13\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\22\42\1\u01ea\6\42\2\0\31\42\12\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\21\42\1\u01eb\7\42" +
                    "\2\0\31\42\12\0\1\42\6\0\1\42\2\0\3\42" +
                    "\7\0\31\42\2\0\24\42\1\u01ec\4\42\112\0\1\u01ed" +
                    "\21\0\1\42\6\0\1\42\2\0\3\42\7\0\31\42" +
                    "\2\0\5\42\1\u01ee\23\42\12\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\13\42\1\u01ef\15\42" +
                    "\116\0\1\u01f0\51\0\1\u01f1\65\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\16\42\1\u01f2\12\42" +
                    "\75\0\1\u01f3\133\0\1\u01f4\65\0\1\u01f5\60\0\1\42" +
                    "\6\0\1\42\2\0\3\42\7\0\31\42\2\0\24\42" +
                    "\1\u01f6\4\42\112\0\1\u01f7\21\0\1\42\6\0\1\42" +
                    "\2\0\3\42\7\0\31\42\2\0\22\42\1\u01f8\6\42" +
                    "\75\0\1\u01f9\31\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[30176];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\2\1\6\11\6\1\1\11\1\1\1\11" +
                    "\1\1\1\11\31\1\2\11\21\1\4\11\1\1\1\11" +
                    "\2\1\2\11\2\0\2\1\1\0\2\11\1\0\4\11" +
                    "\3\0\21\1\1\0\72\1\1\0\1\11\1\1\1\0" +
                    "\1\1\1\0\3\11\1\0\16\1\1\0\41\1\1\0" +
                    "\43\1\1\11\1\1\2\0\12\1\1\0\34\1\2\0" +
                    "\33\1\1\0\42\1\2\0\21\1\1\0\14\1\1\0" +
                    "\20\1\2\0\14\1\1\0\27\1\1\0\5\1\1\0" +
                    "\11\1\1\0\3\1\1\0\7\1\1\0\2\1\2\0" +
                    "\4\1\1\0\2\1\2\0\1\1\1\11\1\0\1\11" +
                    "\1\1\1\0\1\1\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[505];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private final java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    private boolean zzEOFDone;

    /* user code: */
    _NuXmvLexer() {
        this(null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    _NuXmvLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                switch (zzLexicalState) {
                    case IN_BLOCK_COMMENT: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }  // fall though
                    case 506:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 167:
                        break;
                    case 2: {
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 168:
                        break;
                    case 3: {
                        return NOT;
                    }
                    // fall through
                    case 169:
                        break;
                    case 4: {
                        return AND;
                    }
                    // fall through
                    case 170:
                        break;
                    case 5: {
                        return LPAREN;
                    }
                    // fall through
                    case 171:
                        break;
                    case 6: {
                        return RPAREN;
                    }
                    // fall through
                    case 172:
                        break;
                    case 7: {
                        return MULT;
                    }
                    // fall through
                    case 173:
                        break;
                    case 8: {
                        return PLUS;
                    }
                    // fall through
                    case 174:
                        break;
                    case 9: {
                        return COMMA;
                    }
                    // fall through
                    case 175:
                        break;
                    case 10: {
                        return MINUS;
                    }
                    // fall through
                    case 176:
                        break;
                    case 11: {
                        return DOT;
                    }
                    // fall through
                    case 177:
                        break;
                    case 12: {
                        return DIV;
                    }
                    // fall through
                    case 178:
                        break;
                    case 13: {
                        return POSITIVE_INTEGER_NUMBER;
                    }
                    // fall through
                    case 179:
                        break;
                    case 14: {
                        return COLON;
                    }
                    // fall through
                    case 180:
                        break;
                    case 15: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 181:
                        break;
                    case 16: {
                        return LESS;
                    }
                    // fall through
                    case 182:
                        break;
                    case 17: {
                        return EQUALITY;
                    }
                    // fall through
                    case 183:
                        break;
                    case 18: {
                        return GREATER;
                    }
                    // fall through
                    case 184:
                        break;
                    case 19: {
                        return QUESTION_MARK;
                    }
                    // fall through
                    case 185:
                        break;
                    case 20: {
                        return CTL_FORALL;
                    }
                    // fall through
                    case 186:
                        break;
                    case 21: {
                        return IDENTIFIER;
                    }
                    // fall through
                    case 187:
                        break;
                    case 22: {
                        return CTL_EXISTS;
                    }
                    // fall through
                    case 188:
                        break;
                    case 23: {
                        return LTL_FINALLY;
                    }
                    // fall through
                    case 189:
                        break;
                    case 24: {
                        return LTL_GLOBALLY;
                    }
                    // fall through
                    case 190:
                        break;
                    case 25: {
                        return LTL_HISTORICALLY;
                    }
                    // fall through
                    case 191:
                        break;
                    case 26: {
                        return LTL_SINCE;
                    }
                    // fall through
                    case 192:
                        break;
                    case 27: {
                        return LTL_TRIGGERED;
                    }
                    // fall through
                    case 193:
                        break;
                    case 28: {
                        return TL_UNTIL;
                    }
                    // fall through
                    case 194:
                        break;
                    case 29: {
                        return LTL_RELEASES;
                    }
                    // fall through
                    case 195:
                        break;
                    case 30: {
                        return LTL_NEXT;
                    }
                    // fall through
                    case 196:
                        break;
                    case 31: {
                        return LTL_PREVIOUS;
                    }
                    // fall through
                    case 197:
                        break;
                    case 32: {
                        return LTL_NOT_PREVIOUS;
                    }
                    // fall through
                    case 198:
                        break;
                    case 33: {
                        return LBRACKET;
                    }
                    // fall through
                    case 199:
                        break;
                    case 34: {
                        return RBRACKET;
                    }
                    // fall through
                    case 200:
                        break;
                    case 35: {
                        return LBRACE;
                    }
                    // fall through
                    case 201:
                        break;
                    case 36: {
                        return OR;
                    }
                    // fall through
                    case 202:
                        break;
                    case 37: {
                        return RBRACE;
                    }
                    // fall through
                    case 203:
                        break;
                    case 38: {
                    }
                    // fall through
                    case 204:
                        break;
                    case 39: {
                        return NOT_EQUALITY;
                    }
                    // fall through
                    case 205:
                        break;
                    case 40: {
                        return LINE_COMMENT;
                    }
                    // fall through
                    case 206:
                        break;
                    case 41: {
                        return INTEGER_NUMBER;
                    }
                    // fall through
                    case 207:
                        break;
                    case 42: {
                        return IMPLICATION;
                    }
                    // fall through
                    case 208:
                        break;
                    case 43: {
                        return RANGE;
                    }
                    // fall through
                    case 209:
                        break;
                    case 44: {
                        return HEX_NUMBER;
                    }
                    // fall through
                    case 210:
                        break;
                    case 45: {
                        return CONCAT;
                    }
                    // fall through
                    case 211:
                        break;
                    case 46: {
                        return ASSIGN;
                    }
                    // fall through
                    case 212:
                        break;
                    case 47: {
                        return SHIFT_LEFT;
                    }
                    // fall through
                    case 213:
                        break;
                    case 48: {
                        return LESS_EQ;
                    }
                    // fall through
                    case 214:
                        break;
                    case 49: {
                        return GREATER_EQ;
                    }
                    // fall through
                    case 215:
                        break;
                    case 50: {
                        return SHIFT_RIGHT;
                    }
                    // fall through
                    case 216:
                        break;
                    case 51: {
                        return CTL_FORALL_FINALLY;
                    }
                    // fall through
                    case 217:
                        break;
                    case 52: {
                        return CTL_FORALL_NEXT;
                    }
                    // fall through
                    case 218:
                        break;
                    case 53: {
                        return CTL_FORALL_GLOBALLY;
                    }
                    // fall through
                    case 219:
                        break;
                    case 54: {
                        return RTCTL_BU;
                    }
                    // fall through
                    case 220:
                        break;
                    case 55: {
                        return CTL_EXISTS_FINALLY;
                    }
                    // fall through
                    case 221:
                        break;
                    case 56: {
                        return CTL_EXISTS_GLOBALLY;
                    }
                    // fall through
                    case 222:
                        break;
                    case 57: {
                        return CTL_EXISTS_NEXT;
                    }
                    // fall through
                    case 223:
                        break;
                    case 58: {
                        return IN_KW;
                    }
                    // fall through
                    case 224:
                        break;
                    case 59: {
                        return IN;
                    }
                    // fall through
                    case 225:
                        break;
                    case 60: {
                        return LN_FUN;
                    }
                    // fall through
                    case 226:
                        break;
                    case 61: {
                        return ARRAY_OF;
                    }
                    // fall through
                    case 227:
                        break;
                    case 62: {
                        yybegin(IN_BLOCK_COMMENT);
                        yypushback(3);
                    }
                    // fall through
                    case 228:
                        break;
                    case 63: {
                        return FLOAT_NUMBER;
                    }
                    // fall through
                    case 229:
                        break;
                    case 64: {
                        return EXPONENTIAL_NUMBER;
                    }
                    // fall through
                    case 230:
                        break;
                    case 65: {
                        return EQUIVALENCE;
                    }
                    // fall through
                    case 231:
                        break;
                    case 66: {
                        return LTL_AT_NEXT;
                    }
                    // fall through
                    case 232:
                        break;
                    case 67: {
                        return LTL_AT_LAST;
                    }
                    // fall through
                    case 233:
                        break;
                    case 68: {
                        return RTCTL_ABF;
                    }
                    // fall through
                    case 234:
                        break;
                    case 69: {
                        return RTCTL_ABG;
                    }
                    // fall through
                    case 235:
                        break;
                    case 70: {
                        return RTCTL_EBF;
                    }
                    // fall through
                    case 236:
                        break;
                    case 71: {
                        return RTCTL_EBG;
                    }
                    // fall through
                    case 237:
                        break;
                    case 72: {
                        return FUN_KW;
                    }
                    // fall through
                    case 238:
                        break;
                    case 73: {
                        return ISA_KW;
                    }
                    // fall through
                    case 239:
                        break;
                    case 74: {
                        return MAX_KW;
                    }
                    // fall through
                    case 240:
                        break;
                    case 75: {
                        return MIN_KW;
                    }
                    // fall through
                    case 241:
                        break;
                    case 76: {
                        return SAT_KW;
                    }
                    // fall through
                    case 242:
                        break;
                    case 77: {
                        return VAR_KW;
                    }
                    // fall through
                    case 243:
                        break;
                    case 78: {
                        return ABS_FUN;
                    }
                    // fall through
                    case 244:
                        break;
                    case 79: {
                        return COS_FUN;
                    }
                    // fall through
                    case 245:
                        break;
                    case 80: {
                        return EXP_FUN;
                    }
                    // fall through
                    case 246:
                        break;
                    case 81: {
                        return MAX_FUN;
                    }
                    // fall through
                    case 247:
                        break;
                    case 82: {
                        return MIN_FUN;
                    }
                    // fall through
                    case 248:
                        break;
                    case 83: {
                        return MOD;
                    }
                    // fall through
                    case 249:
                        break;
                    case 84: {
                        return POW_FUN;
                    }
                    // fall through
                    case 250:
                        break;
                    case 85: {
                        return SIN_FUN;
                    }
                    // fall through
                    case 251:
                        break;
                    case 86: {
                        return TAN_FUN;
                    }
                    // fall through
                    case 252:
                        break;
                    case 87: {
                        return XOR;
                    }
                    // fall through
                    case 253:
                        break;
                    case 88: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }
                    // fall through
                    case 254:
                        break;
                    case 89: {
                        return INIT_KW;
                    }
                    // fall through
                    case 255:
                        break;
                    case 90: {
                        return IVAR_KW;
                    }
                    // fall through
                    case 256:
                        break;
                    case 91: {
                        return NAME_KW;
                    }
                    // fall through
                    case 257:
                        break;
                    case 92: {
                        return REAL_KW;
                    }
                    // fall through
                    case 258:
                        break;
                    case 93: {
                        return SPEC_KW;
                    }
                    // fall through
                    case 259:
                        break;
                    case 94: {
                        return TRUE_KW;
                    }
                    // fall through
                    case 260:
                        break;
                    case 95: {
                        return WORD_KW;
                    }
                    // fall through
                    case 261:
                        break;
                    case 96: {
                        return ACOS_FUN;
                    }
                    // fall through
                    case 262:
                        break;
                    case 97: {
                        return ASIN_FUN;
                    }
                    // fall through
                    case 263:
                        break;
                    case 98: {
                        return ATAN_FUN;
                    }
                    // fall through
                    case 264:
                        break;
                    case 99: {
                        return TO_BOOL_FUN;
                    }
                    // fall through
                    case 265:
                        break;
                    case 100: {
                        return CASE_KW;
                    }
                    // fall through
                    case 266:
                        break;
                    case 101: {
                        return ESAC_KW;
                    }
                    // fall through
                    case 267:
                        break;
                    case 102: {
                        return INIT_FUN;
                    }
                    // fall through
                    case 268:
                        break;
                    case 103: {
                        return NEXT_FUN;
                    }
                    // fall through
                    case 269:
                        break;
                    case 104: {
                        return REAL_TYPE;
                    }
                    // fall through
                    case 270:
                        break;
                    case 105: {
                        return SELF_KW;
                    }
                    // fall through
                    case 271:
                        break;
                    case 106: {
                        return SQRT_FUN;
                    }
                    // fall through
                    case 272:
                        break;
                    case 107: {
                        return WORD_TYPE;
                    }
                    // fall through
                    case 273:
                        break;
                    case 108: {
                        return NOT_XOR;
                    }
                    // fall through
                    case 274:
                        break;
                    case 109: {
                        return WORD;
                    }
                    // fall through
                    case 275:
                        break;
                    case 110: {
                        return CLOCK_KW;
                    }
                    // fall through
                    case 276:
                        break;
                    case 111: {
                        return FALSE_KW;
                    }
                    // fall through
                    case 277:
                        break;
                    case 112: {
                        return FRACTIONAL_NUMBER;
                    }
                    // fall through
                    case 278:
                        break;
                    case 113: {
                        return INVAR_KW;
                    }
                    // fall through
                    case 279:
                        break;
                    case 114: {
                        return ITYPE_KW;
                    }
                    // fall through
                    case 280:
                        break;
                    case 115: {
                        return TRANS_KW;
                    }
                    // fall through
                    case 281:
                        break;
                    case 116: {
                        return VALID_KW;
                    }
                    // fall through
                    case 282:
                        break;
                    case 117: {
                        return ARRAY_TYPE;
                    }
                    // fall through
                    case 283:
                        break;
                    case 118: {
                        return CLOCK_TYPE;
                    }
                    // fall through
                    case 284:
                        break;
                    case 119: {
                        return COUNT_FUN;
                    }
                    // fall through
                    case 285:
                        break;
                    case 120: {
                        return FLOOR_FUN;
                    }
                    // fall through
                    case 286:
                        break;
                    case 121: {
                        return TO_INT_FUN;
                    }
                    // fall through
                    case 287:
                        break;
                    case 122: {
                        return UNION;
                    }
                    // fall through
                    case 288:
                        break;
                    case 123: {
                        return TO_WORD1_FUN;
                    }
                    // fall through
                    case 289:
                        break;
                    case 124: {
                        return ASSIGN_KW;
                    }
                    // fall through
                    case 290:
                        break;
                    case 125: {
                        return COMPID_KW;
                    }
                    // fall through
                    case 291:
                        break;
                    case 126: {
                        return CTLWFF_KW;
                    }
                    // fall through
                    case 292:
                        break;
                    case 127: {
                        return DEFINE_KW;
                    }
                    // fall through
                    case 293:
                        break;
                    case 128: {
                        return LTLWFF_KW;
                    }
                    // fall through
                    case 294:
                        break;
                    case 129: {
                        return MIRROR_KW;
                    }
                    // fall through
                    case 295:
                        break;
                    case 130: {
                        return MODULE_KW;
                    }
                    // fall through
                    case 296:
                        break;
                    case 131: {
                        return URGENT_KW;
                    }
                    // fall through
                    case 297:
                        break;
                    case 132: {
                        return EXTEND_FUN;
                    }
                    // fall through
                    case 298:
                        break;
                    case 133: {
                        return RESIZE_FUN;
                    }
                    // fall through
                    case 299:
                        break;
                    case 134: {
                        return TO_SIGNED_FUN;
                    }
                    // fall through
                    case 300:
                        break;
                    case 135: {
                        return SIZEOF_FUN;
                    }
                    // fall through
                    case 301:
                        break;
                    case 136: {
                        return COMPUTE_KW;
                    }
                    // fall through
                    case 302:
                        break;
                    case 137: {
                        return COMPWFF_KW;
                    }
                    // fall through
                    case 303:
                        break;
                    case 138: {
                        return CTLSPEC_KW;
                    }
                    // fall through
                    case 304:
                        break;
                    case 139: {
                        return INTEGER_KW;
                    }
                    // fall through
                    case 305:
                        break;
                    case 140: {
                        return JUSTICE_KW;
                    }
                    // fall through
                    case 306:
                        break;
                    case 141: {
                        return LTLSPEC_KW;
                    }
                    // fall through
                    case 307:
                        break;
                    case 142: {
                        return MDEFINE_KW;
                    }
                    // fall through
                    case 308:
                        break;
                    case 143: {
                        return MONONEG_KW;
                    }
                    // fall through
                    case 309:
                        break;
                    case 144: {
                        return MONOPOS_KW;
                    }
                    // fall through
                    case 310:
                        break;
                    case 145: {
                        return NEXTWFF_KW;
                    }
                    // fall through
                    case 311:
                        break;
                    case 146: {
                        return PSLSPEC_KW;
                    }
                    // fall through
                    case 312:
                        break;
                    case 147: {
                        return SIMPWFF_KW;
                    }
                    // fall through
                    case 313:
                        break;
                    case 148: {
                        return BOOLEAN_TYPE;
                    }
                    // fall through
                    case 314:
                        break;
                    case 149: {
                        return INTEGER_TYPE;
                    }
                    // fall through
                    case 315:
                        break;
                    case 150: {
                        return SWCONST_FUN;
                    }
                    // fall through
                    case 316:
                        break;
                    case 151: {
                        return UWCONST_FUN;
                    }
                    // fall through
                    case 317:
                        break;
                    case 152: {
                        return FAIRNESS_KW;
                    }
                    // fall through
                    case 318:
                        break;
                    case 153: {
                        return PARSYNTH_KW;
                    }
                    // fall through
                    case 319:
                        break;
                    case 154: {
                        return TO_UNSIGNED_FUN;
                    }
                    // fall through
                    case 320:
                        break;
                    case 155: {
                        return CONSTANTS_KW;
                    }
                    // fall through
                    case 321:
                        break;
                    case 156: {
                        return FROZENVAR_KW;
                    }
                    // fall through
                    case 322:
                        break;
                    case 157: {
                        return INVARSPEC_KW;
                    }
                    // fall through
                    case 323:
                        break;
                    case 158: {
                        return COMPASSION_KW;
                    }
                    // fall through
                    case 324:
                        break;
                    case 159: {
                        return CONSTRAINT_KW;
                    }
                    // fall through
                    case 325:
                        break;
                    case 160: {
                        return PREDICATES_KW;
                    }
                    // fall through
                    case 326:
                        break;
                    case 161: {
                        return LTL_TIME_SINCE;
                    }
                    // fall through
                    case 327:
                        break;
                    case 162: {
                        return LTL_TIME_UNTIL;
                    }
                    // fall through
                    case 328:
                        break;
                    case 163: {
                        return SIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 329:
                        break;
                    case 164: {
                        return TIME_DOMAIN_KW;
                    }
                    // fall through
                    case 330:
                        break;
                    case 165: {
                        return NONCONTINUOUS_KW;
                    }
                    // fall through
                    case 331:
                        break;
                    case 166: {
                        return UNSIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 332:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
