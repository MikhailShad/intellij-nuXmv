// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: nuXmv.flex

/* JFlex specification for nuXmv lexer */

package dev.mikhailshad.nuxmvplugin.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static dev.mikhailshad.nuxmvplugin.language.psi.NuXmvTypes.*;


class _NuXmvLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int IN_BLOCK_COMMENT = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\37\u0100\1\u0200\u10df\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\0\1\2\22\0\1\3\1\4" +
                    "\1\0\2\5\1\6\1\7\1\0\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\10\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61" +
                    "\1\62\1\63\1\0\1\64\1\0\1\65\1\0\1\66" +
                    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76" +
                    "\1\44\1\77\1\100\1\101\1\102\1\103\1\104\1\105" +
                    "\1\106\1\107\1\110\1\111\1\44\1\112\1\113\1\114" +
                    "\1\115\1\116\1\117\1\120\1\121\u019a\0\1\122\346\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[768];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\1\1\24\3\25" +
                    "\1\26\1\27\1\30\1\31\10\25\1\32\1\33\1\34" +
                    "\1\35\1\25\1\36\1\37\1\40\1\41\1\42\21\25" +
                    "\1\43\1\44\1\45\2\46\1\47\2\0\1\50\1\51" +
                    "\1\52\1\53\2\0\2\54\1\0\1\55\1\56\1\0" +
                    "\1\57\1\60\1\61\1\62\3\0\1\25\1\63\1\64" +
                    "\1\25\1\65\1\66\5\25\1\67\1\70\1\71\3\25" +
                    "\1\0\1\72\43\25\1\73\1\74\5\25\1\75\16\25" +
                    "\3\0\1\76\1\77\1\0\1\100\1\0\1\101\1\102" +
                    "\1\103\1\0\1\104\1\105\6\25\1\106\1\107\3\25" +
                    "\1\110\1\0\2\25\1\111\5\25\1\112\1\25\1\113" +
                    "\11\25\1\114\6\25\1\115\1\25\1\116\3\25\1\0" +
                    "\4\25\1\117\2\25\1\120\4\25\1\121\1\122\1\123" +
                    "\2\25\1\124\4\25\1\125\3\25\1\126\7\25\1\127" +
                    "\1\130\1\131\1\132\1\100\2\0\12\25\1\0\1\133" +
                    "\2\25\1\134\10\25\1\135\4\25\1\136\1\25\1\137" +
                    "\1\25\1\140\2\25\1\141\1\142\1\25\1\143\2\0" +
                    "\1\144\1\145\1\146\2\25\1\147\2\25\1\150\1\25" +
                    "\1\151\1\25\1\152\1\25\1\153\2\25\1\154\6\25" +
                    "\1\155\1\156\1\157\1\0\10\25\1\160\2\25\1\161" +
                    "\1\25\1\162\1\163\1\164\16\25\1\165\1\25\1\166" +
                    "\1\167\2\0\1\25\1\170\1\171\1\25\1\172\7\25" +
                    "\1\173\1\174\2\25\1\175\1\0\1\176\1\25\1\177" +
                    "\5\25\1\200\1\201\2\25\1\0\4\25\1\202\1\25" +
                    "\1\203\1\204\7\25\1\205\2\0\1\25\1\206\2\25" +
                    "\1\207\1\210\1\211\5\25\1\0\1\25\1\212\1\213" +
                    "\2\25\1\214\3\25\1\215\1\216\1\217\1\220\1\221" +
                    "\1\222\1\223\2\25\1\224\1\225\1\226\1\227\1\25" +
                    "\1\0\1\230\3\25\1\231\1\0\3\25\1\232\2\25" +
                    "\1\233\2\25\1\0\2\25\1\234\1\0\1\25\1\235" +
                    "\1\25\1\236\1\237\2\25\1\0\2\25\2\0\1\240" +
                    "\1\241\1\242\1\25\1\0\1\243\1\244\2\0\1\25" +
                    "\1\245\1\0\1\246\1\25\1\0\1\247\1\250";

    private static int[] zzUnpackAction() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\246\0\246" +
                    "\0\246\0\246\0\246\0\246\0\u01f2\0\u0245\0\u0298\0\u02eb" +
                    "\0\u033e\0\u0391\0\246\0\u03e4\0\246\0\u0437\0\246\0\u048a" +
                    "\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u06cf" +
                    "\0\u0722\0\u0775\0\u06cf\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914" +
                    "\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u06cf\0\u06cf\0\u06cf" +
                    "\0\246\0\246\0\u0b06\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5" +
                    "\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d" +
                    "\0\u0f90\0\u0fe3\0\u1036\0\246\0\246\0\246\0\246\0\u1089" +
                    "\0\246\0\u10dc\0\u112f\0\u1182\0\u11d5\0\246\0\246\0\u1228" +
                    "\0\u127b\0\u12ce\0\u1321\0\u1374\0\246\0\246\0\u13c7\0\246" +
                    "\0\246\0\246\0\246\0\u141a\0\u146d\0\u14c0\0\u1513\0\u06cf" +
                    "\0\u06cf\0\u1566\0\u06cf\0\u06cf\0\u15b9\0\u160c\0\u165f\0\u16b2" +
                    "\0\u1705\0\u06cf\0\u06cf\0\u06cf\0\u1758\0\u17ab\0\u17fe\0\u1851" +
                    "\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9" +
                    "\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81" +
                    "\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019" +
                    "\0\u206c\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u220b\0\u225e\0\u22b1" +
                    "\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u06cf\0\u24a3\0\u24f6" +
                    "\0\u2549\0\u259c\0\u25ef\0\u06cf\0\u2642\0\u2695\0\u26e8\0\u273b" +
                    "\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3" +
                    "\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\246\0\u127b\0\u2bc5" +
                    "\0\u2c18\0\u2c6b\0\246\0\246\0\246\0\u2cbe\0\u06cf\0\u06cf" +
                    "\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u06cf\0\u06cf" +
                    "\0\u2f03\0\u2f56\0\u2fa9\0\u06cf\0\u2ffc\0\u304f\0\u30a2\0\u06cf" +
                    "\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241\0\u06cf\0\u3294\0\u06cf" +
                    "\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c" +
                    "\0\u357f\0\u06cf\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771" +
                    "\0\u06cf\0\u37c4\0\u06cf\0\u3817\0\u386a\0\u38bd\0\u3910\0\u3963" +
                    "\0\u39b6\0\u3a09\0\u3a5c\0\u06cf\0\u3aaf\0\u3b02\0\u06cf\0\u3b55" +
                    "\0\u3ba8\0\u3bfb\0\u3c4e\0\u06cf\0\u06cf\0\u06cf\0\u3ca1\0\u3cf4" +
                    "\0\u06cf\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u06cf\0\u3e93\0\u3ee6" +
                    "\0\u3f39\0\u06cf\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8\0\u412b" +
                    "\0\u417e\0\u06cf\0\246\0\246\0\246\0\u2bc5\0\u41d1\0\u4224" +
                    "\0\u4277\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc" +
                    "\0\u450f\0\u4562\0\u45b5\0\u06cf\0\u4608\0\u465b\0\u06cf\0\u46ae" +
                    "\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u06cf" +
                    "\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u06cf\0\u4a92\0\u06cf\0\u4ae5" +
                    "\0\u06cf\0\u4b38\0\u4b8b\0\u06cf\0\u06cf\0\u4bde\0\u06cf\0\u4c31" +
                    "\0\u4c84\0\u06cf\0\u4cd7\0\u06cf\0\u4d2a\0\u4d7d\0\u06cf\0\u4dd0" +
                    "\0\u4e23\0\u06cf\0\u4e76\0\u06cf\0\u4ec9\0\u06cf\0\u4f1c\0\u06cf" +
                    "\0\u4f6f\0\u4fc2\0\u06cf\0\u5015\0\u5068\0\u50bb\0\u510e\0\u5161" +
                    "\0\u51b4\0\u5207\0\u06cf\0\u41d1\0\u525a\0\u52ad\0\u5300\0\u5353" +
                    "\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u06cf\0\u5545\0\u5598" +
                    "\0\u06cf\0\u55eb\0\u563e\0\u5691\0\u06cf\0\u56e4\0\u5737\0\u578a" +
                    "\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22" +
                    "\0\u5a75\0\u5ac8\0\u5b1b\0\u06cf\0\u5b6e\0\u06cf\0\u06cf\0\u5bc1" +
                    "\0\u5c14\0\u5c67\0\u06cf\0\u06cf\0\u5cba\0\u06cf\0\u5d0d\0\u5d60" +
                    "\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u06cf\0\u06cf\0\u5f52" +
                    "\0\u5fa5\0\u06cf\0\u5ff8\0\u06cf\0\u604b\0\u06cf\0\u609e\0\u60f1" +
                    "\0\u6144\0\u6197\0\u61ea\0\u06cf\0\u06cf\0\u623d\0\u6290\0\u62e3" +
                    "\0\u6336\0\u6389\0\u63dc\0\u642f\0\u06cf\0\u6482\0\u06cf\0\u06cf" +
                    "\0\u64d5\0\u6528\0\u657b\0\u65ce\0\u6621\0\u6674\0\u66c7\0\u06cf" +
                    "\0\u671a\0\u676d\0\u67c0\0\u06cf\0\u6813\0\u6866\0\u06cf\0\u68b9" +
                    "\0\u06cf\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe" +
                    "\0\u06cf\0\u06cf\0\u6b51\0\u6ba4\0\u06cf\0\u6bf7\0\u6c4a\0\u6c9d" +
                    "\0\u06cf\0\u06cf\0\u06cf\0\u06cf\0\u06cf\0\u06cf\0\u06cf\0\u6cf0" +
                    "\0\u6d43\0\u06cf\0\u06cf\0\u06cf\0\u06cf\0\u6d96\0\u6de9\0\u06cf" +
                    "\0\u6e3c\0\u6e8f\0\u6ee2\0\u06cf\0\u6f35\0\u6f88\0\u6fdb\0\u702e" +
                    "\0\u06cf\0\u7081\0\u70d4\0\u06cf\0\u7127\0\u717a\0\u71cd\0\u7220" +
                    "\0\u7273\0\u72c6\0\u7319\0\u736c\0\u06cf\0\u73bf\0\u06cf\0\u06cf" +
                    "\0\u7412\0\u7465\0\u74b8\0\u750b\0\u755e\0\u75b1\0\u7604\0\u06cf" +
                    "\0\u06cf\0\u06cf\0\u7657\0\u76aa\0\u06cf\0\u06cf\0\u76fd\0\u7750" +
                    "\0\u77a3\0\246\0\u77f6\0\246\0\u7849\0\u789c\0\u06cf\0\246";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\3\4\1\5\1\3\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\40\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\43\1\63\1\64\1\65\1\43\1\66" +
                    "\1\67\2\43\1\70\1\43\1\71\1\72\1\73\1\74" +
                    "\1\75\1\43\1\76\1\77\1\100\1\101\1\102\1\103" +
                    "\2\43\1\104\1\105\1\106\2\3\15\107\1\110\105\107" +
                    "\124\0\3\4\145\0\1\111\132\0\1\112\1\113\100\0" +
                    "\1\114\2\0\3\115\4\0\1\116\111\0\1\117\121\0" +
                    "\1\120\123\0\1\121\1\0\3\21\7\0\4\122\1\123" +
                    "\1\122\26\0\4\122\1\123\1\122\13\0\1\124\1\0" +
                    "\1\124\27\0\1\121\1\0\3\21\7\0\4\122\1\123" +
                    "\1\122\26\0\4\122\1\123\1\122\52\0\1\125\2\0" +
                    "\1\126\111\0\1\127\7\0\1\130\1\131\122\0\1\132" +
                    "\1\133\132\0\1\134\10\0\1\135\3\0\1\136\53\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\1\43\1\137" +
                    "\3\43\1\140\1\141\12\43\1\142\4\43\1\143\2\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\23\43\1\144\5\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\16\43\1\145\3\43" +
                    "\1\146\6\43\2\0\13\43\1\147\15\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\4\43\1\150\24\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\1\43\1\151\3\43\1\152\1\153\17\43\1\154" +
                    "\2\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\1\155\17\43\1\156\2\43\1\157\5\43" +
                    "\2\0\31\43\4\0\1\160\5\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\15\43\1\161\3\43" +
                    "\1\162\1\163\1\43\1\164\4\43\2\0\15\43\1\165" +
                    "\13\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\23\43\1\166\5\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\22\43\1\167\6\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\1\170\2\43\1\171\4\43\1\172\5\43\1\173\12\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\1\174\3\43\1\175\24\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\1\176\17\43" +
                    "\1\177\1\200\7\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\5\43\1\201" +
                    "\23\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\1\202\7\43\1\203\6\43\1\204\11\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\20\43" +
                    "\1\205\10\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\20\43\1\206\10\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\1\207" +
                    "\30\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\16\43\1\210\12\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\2\43\1\211\1\212\15\43\1\213\1\214\1\215\5\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\16\43\1\216\12\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\1\43\1\217\11\43" +
                    "\1\220\2\43\1\221\12\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\22\43\1\222\3\43" +
                    "\1\223\2\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\13\43\1\224\15\43\4\0\1\160" +
                    "\5\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\15\43\1\225\13\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\15\43\1\226\13\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\1\43\1\227\7\43\1\230\4\43\1\231\12\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\5\43\1\232\10\43\1\233\12\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\6\43" +
                    "\1\234\22\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\16\43\1\235\12\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\5\43" +
                    "\1\236\23\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\5\43\1\237\3\43\1\240\6\43" +
                    "\1\241\4\43\1\242\3\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\1\43\1\243\7\43" +
                    "\1\244\4\43\1\245\12\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\15\43\1\246\7\43" +
                    "\1\247\3\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\16\43\1\250\12\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\15\43" +
                    "\1\251\1\252\12\43\22\0\1\253\154\0\1\254\123\0" +
                    "\1\255\52\0\2\114\1\0\120\114\20\0\3\115\115\0" +
                    "\1\256\125\0\3\257\120\0\3\122\7\0\6\122\26\0" +
                    "\6\122\44\0\1\260\2\0\3\261\7\0\6\122\26\0" +
                    "\6\122\62\0\1\262\1\0\1\262\3\0\1\262\6\0" +
                    "\1\262\16\0\1\262\1\0\1\262\3\0\1\262\5\0" +
                    "\1\262\46\0\1\263\214\0\1\264\122\0\1\265\43\0" +
                    "\1\266\65\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\5\43\1\267\1\270\22\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\21\43\1\271\7\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\14\43\1\272\1\273\13\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\13\43\1\274" +
                    "\15\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\16\43\1\275\12\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\5\43\1\276" +
                    "\23\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\5\43\1\277\1\300\22\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\10\43" +
                    "\1\301\2\43\1\302\15\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\16\43\1\303\12\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\15\43\1\304\13\43\2\0\31\43\25\0\3\305" +
                    "\105\0\1\43\7\0\1\43\2\0\3\43\7\0\10\43" +
                    "\1\306\13\43\1\307\4\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\1\310\30\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\27\43\1\311\1\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\1\312\30\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\23\43\1\313\5\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\21\43\1\314\7\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\13\43" +
                    "\1\315\15\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\26\43\1\316\2\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\4\43" +
                    "\1\317\24\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\15\43\1\320\2\43\1\321\10\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\3\43\1\322\11\43\1\323\13\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\14\43" +
                    "\1\324\14\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\26\43\1\325\2\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\20\43" +
                    "\1\326\10\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\4\43\1\327\24\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\13\43" +
                    "\1\330\15\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\1\43\1\331\27\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\22\43" +
                    "\1\332\6\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\14\43\1\333\14\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\4\43" +
                    "\1\334\24\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\1\335\22\43\1\336\5\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\6\43\1\337\22\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\13\43\1\340\4\43\1\341" +
                    "\10\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\21\43\1\342\7\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\22\43\1\343\6\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\16\43\1\344\12\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\21\43\1\345\7\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\11\43\1\346\17\43\10\0" +
                    "\1\347\1\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\1\43\1\350\27\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\16\43\1\351" +
                    "\12\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\22\43\1\352\6\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\16\43\1\353" +
                    "\12\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\22\43\1\354\1\43\1\355\4\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\1\43\1\356\27\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\17\43\1\357\3\43\1\360" +
                    "\5\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\16\43\1\361\12\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\11\43\1\362" +
                    "\11\43\1\363\5\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\26\43\1\364\2\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\15\43\1\365\13\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\4\43\1\366\24\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\26\43\1\367\2\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\370\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\25\43\1\371\3\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\1\43\1\372\20\43\1\373" +
                    "\6\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\13\43\1\374\15\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\7\43\1\375" +
                    "\5\43\1\376\12\43\1\377\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\21\43\1\u0100\7\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\3\43\1\u0101\25\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\15\43\1\u0102\13\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\14\43\1\u0103\14\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\11\43\1\u0104\17\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\11\43\1\u0105\10\43\1\u0106\6\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\3\43" +
                    "\1\u0107\25\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\21\43\1\u0108\7\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\16\43" +
                    "\1\u0109\12\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\21\43\1\u010a\7\43\24\0\1\u010b" +
                    "\140\0\1\u010c\137\0\1\u010d\70\0\3\u010e\120\0\3\261" +
                    "\7\0\6\122\26\0\6\122\47\0\3\262\42\0\1\u010f" +
                    "\103\0\1\u0110\61\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\10\43\1\u0111\20\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\17\43\1\u0112\11\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\21\43\1\u0113\7\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\21\43\1\u0114\3\43" +
                    "\1\u0115\3\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\3\43\1\u0116\25\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\10\43" +
                    "\1\u0117\20\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\20\43\1\u0118\10\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\21\43" +
                    "\1\u0119\7\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\30\43\1\u011a\2\0\31\43\24\0" +
                    "\1\u011b\3\305\105\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\22\43\1\u011c\6\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\1\u011d\30\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\17\43\1\u011e\11\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\20\43\1\u011f\10\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\5\43\1\u0120\23\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\22\43\1\u0121\6\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\21\43\1\u0122\3\43\1\u0123\3\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\5\43\1\u0124" +
                    "\23\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\20\43\1\u0125\10\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\23\43\1\u0126" +
                    "\5\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\16\43\1\u0127\12\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\4\43\1\u0128" +
                    "\24\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\22\43\1\u0129\6\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\21\43\1\u012a" +
                    "\7\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\3\43\1\u012b\25\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\21\43\1\u012c" +
                    "\7\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\13\43\1\u012d\15\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\17\43\1\u012e" +
                    "\11\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\2\43\1\u012f\26\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\15\43\1\u0130" +
                    "\13\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\4\43\1\u0131\24\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\4\43\1\u0132" +
                    "\24\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\10\43\1\u0133\20\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\4\43\1\u0134\24\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\22\43\1\u0135\6\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\1\43\1\u0136\27\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u0137\13\43\105\0" +
                    "\1\u0138\1\0\1\u0139\25\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u013a\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\13\43\1\u013b\15\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\5\43\1\u013c\23\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\3\43\1\u013d\25\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u013e\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\3\43\1\u013f\25\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\5\43\1\u0140\23\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\16\43\1\u0141\12\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\23\43\1\u0142\5\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\5\43\1\u0143\23\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\23\43\1\u0144\5\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\3\43\1\u0145\25\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\13\43\1\u0146\15\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\11\43\1\u0147\17\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\6\43\1\u0148\22\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\15\43\1\u0149\13\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\5\43\1\u014a\23\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\23\43\1\u014b\5\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\16\43\1\u014c\12\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\5\43\1\u014d\23\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u014e\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\16\43\1\u014f\12\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\11\43\1\u0150\17\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\16\43\1\u0151\12\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\4\43\1\u0152\24\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\21\43\1\u0153\7\43\25\0\3\u0154\7\0\6\u0154\26\0" +
                    "\6\u0154\65\0\1\u0155\71\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\6\43\1\u0156\22\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\1\u0157\7\43" +
                    "\1\u0158\12\43\1\u0159\1\43\1\u015a\3\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\22\43" +
                    "\1\u015b\6\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\17\43\1\u015c\11\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\5\43" +
                    "\1\u015d\23\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\12\43\1\u015e\16\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\15\43" +
                    "\1\u015f\13\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\15\43\1\u0160\13\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\4\43" +
                    "\1\u0161\24\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\4\43\1\u0162\24\43\2\0\31\43" +
                    "\25\0\3\u0163\105\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\20\43\1\u0164\10\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\4\43\1\u0165\24\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\7\43\1\u0166\21\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\10\43\1\u0167\20\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\17\43\1\u0168\11\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\5\43\1\u0169\23\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\10\43\1\u016a\20\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\16\43\1\u016b\12\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\13\43\1\u016c\15\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\15\43\1\u016d\1\43" +
                    "\1\u016e\11\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\25\43\1\u016f\3\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\27\43" +
                    "\1\u0170\1\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\10\43\1\u0171\20\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\17\43" +
                    "\1\u0172\11\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\25\43\1\u0173\3\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\21\43" +
                    "\1\u0174\7\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\15\43\1\u0175\13\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\3\43" +
                    "\1\u0176\25\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\27\43\1\u0177\1\43" +
                    "\73\0\1\u0178\126\0\1\u0179\35\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\5\43\1\u017a\23\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\12\43\1\u017b\16\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\23\43\1\u017c\5\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\15\43\1\u017d\13\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\21\43\1\u017e\7\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\7\43\1\u017f\21\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\16\43\1\u0180\12\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\30\43\1\u0181\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\5\43\1\u0182\23\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\16\43\1\u0183\12\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u0184\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\1\u0185\30\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\23\43\1\u0186\5\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\15\43" +
                    "\1\u0187\13\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\7\43\1\u0188\21\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\15\43" +
                    "\1\u0189\13\43\12\0\1\43\7\0\1\43\2\0\1\43" +
                    "\1\u018a\1\43\7\0\31\43\2\0\31\43\10\0\1\u018b" +
                    "\124\0\1\43\7\0\1\43\2\0\3\43\7\0\15\43" +
                    "\1\u018c\13\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\21\43\1\u018d\7\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\3\43" +
                    "\1\u018e\25\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\22\43\1\u018f\6\43\2\0\31\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\5\43" +
                    "\1\u0190\23\43\2\0\31\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\1\u0191\17\43\1\u0192\10\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\4\43\1\u0193\24\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\5\43\1\u0194\23\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\4\43\1\u0195\24\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\4\43\1\u0196\24\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\15\43\1\u0197\13\43\2\0\31\43\25\0\3\u0163\13\0" +
                    "\1\u0198\33\0\1\u0198\35\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\21\43\1\u0199\7\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\5\43\1\u019a\23\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\2\43\1\u019b\26\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\4\43\1\u019c" +
                    "\24\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\5\43\1\u019d\23\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\15\43\1\u019e" +
                    "\13\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\20\43\1\u019f\10\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\4\43\1\u01a0" +
                    "\24\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\4\43\1\u01a1\24\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\16\43\1\u01a2" +
                    "\12\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\5\43\1\u01a3\23\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\15\43\1\u01a4" +
                    "\13\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\2\43\1\u01a5\26\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\4\43\1\u01a6" +
                    "\24\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\5\43\1\u01a7\23\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\22\43\1\u01a8" +
                    "\6\43\2\0\31\43\114\0\1\u01a9\126\0\1\u01aa\14\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\1\43\1\u01ab\27\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\4\43\1\u01ac\24\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\5\43\1\u01ad\23\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\15\43\1\u01ae\13\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\5\43\1\u01af\23\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\4\43\1\u01b0\24\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\6\43\1\u01b1\22\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\22\43\1\u01b2\6\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\31\43\2\0" +
                    "\22\43\1\u01b3\1\43\1\u01b4\4\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\15\43\1\u01b5" +
                    "\13\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\22\43\1\u01b6\6\43\42\0\1\u01b7\72\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\21\43\1\u01b8" +
                    "\7\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\4\43\1\u01b9\24\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\5\43\1\u01ba" +
                    "\23\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\15\43\1\u01bb\13\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\1\u01bc\30\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\2\43\1\u01bd\26\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\21\43\1\u01be\7\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\24\43\1\u01bf\4\43\2\0\31\43\22\0\1\260" +
                    "\2\0\3\u010e\105\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\17\43\1\u01c0\11\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\21\43" +
                    "\1\u01c1\7\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\4\43\1\u01c2\24\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\2\43\1\u01c3\26\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\4\43\1\u01c4\24\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\6\43\1\u01c5\22\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\21\43\1\u01c6\7\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\5\43\1\u01c7\23\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\22\43\1\u01c8\6\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\1\u01c9\30\43\2\0" +
                    "\31\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\2\43\1\u01ca\26\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\5\43\1\u01cb\23\43\2\0" +
                    "\31\43\115\0\1\265\122\0\1\264\17\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\15\43\1\u01cc" +
                    "\13\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\21\43\1\u01cd\7\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\23\43\1\u01ce" +
                    "\5\43\10\0\1\u01cf\1\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\31\43\2\0\31\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\23\43\1\u01d0" +
                    "\5\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\11\43\1\u01d1\17\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\15\43\1\u01d2" +
                    "\13\43\12\0\1\43\7\0\1\43\2\0\3\43\7\0" +
                    "\31\43\2\0\5\43\1\u01d3\23\43\12\0\1\43\7\0" +
                    "\1\43\2\0\3\43\7\0\31\43\2\0\23\43\1\u01d4" +
                    "\5\43\55\0\1\u01d5\57\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\10\43\1\u01d6\20\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\22\43\1\u01d7" +
                    "\6\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\10\43\1\u01d8\20\43\2\0\31\43\12\0" +
                    "\1\43\7\0\1\43\2\0\3\43\7\0\21\43\1\u01d9" +
                    "\7\43\2\0\31\43\12\0\1\43\7\0\1\43\2\0" +
                    "\3\43\7\0\1\u01da\30\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\4\43\1\u01db\24\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\7\43\1\u01dc\21\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\22\43\1\u01dd\6\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\11\43\1\u01de\17\43\117\0\1\u01df" +
                    "\15\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\15\43\1\u01e0\13\43\12\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\23\43\1\u01e1\5\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\4\43\1\u01e2\24\43\53\0\1\u01e3\61\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\16\43\1\u01e4\12\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\21\43\1\u01e5\7\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\15\43\1\u01e6\13\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\20\43\1\u01e7\10\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\2\43\1\u01e8\26\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\4\43\1\u01e9\24\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\15\43" +
                    "\1\u01ea\13\43\110\0\1\u01eb\24\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\3\43\1\u01ec\25\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\11\43\1\u01ed\17\43\10\0\1\u01ee\1\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\31\43" +
                    "\37\0\1\u01ef\75\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\15\43\1\u01f0\13\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\22\43\1\u01f1\6\43" +
                    "\2\0\31\43\12\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\21\43\1\u01f2\7\43\2\0\31\43\12\0\1\43" +
                    "\7\0\1\43\2\0\3\43\7\0\31\43\2\0\24\43" +
                    "\1\u01f3\4\43\113\0\1\u01f4\21\0\1\43\7\0\1\43" +
                    "\2\0\3\43\7\0\31\43\2\0\5\43\1\u01f5\23\43" +
                    "\12\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\13\43\1\u01f6\15\43\117\0\1\u01f7\52\0\1\u01f8" +
                    "\65\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\16\43\1\u01f9\12\43\76\0\1\u01fa\134\0\1\u01fb" +
                    "\66\0\1\u01fc\60\0\1\43\7\0\1\43\2\0\3\43" +
                    "\7\0\31\43\2\0\24\43\1\u01fd\4\43\113\0\1\u01fe" +
                    "\21\0\1\43\7\0\1\43\2\0\3\43\7\0\31\43" +
                    "\2\0\22\43\1\u01ff\6\43\76\0\1\u0200\31\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[30959];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\3\1\6\11\6\1\1\11\1\1\1\11" +
                    "\1\1\1\11\31\1\2\11\21\1\4\11\1\1\1\11" +
                    "\2\0\2\1\2\11\2\0\2\1\1\0\2\11\1\0" +
                    "\4\11\3\0\21\1\1\0\72\1\3\0\1\11\1\1" +
                    "\1\0\1\1\1\0\3\11\1\0\16\1\1\0\41\1" +
                    "\1\0\43\1\3\11\1\1\2\0\12\1\1\0\34\1" +
                    "\2\0\33\1\1\0\42\1\2\0\21\1\1\0\14\1" +
                    "\1\0\20\1\2\0\14\1\1\0\27\1\1\0\5\1" +
                    "\1\0\11\1\1\0\3\1\1\0\7\1\1\0\2\1" +
                    "\2\0\4\1\1\0\2\1\2\0\1\1\1\11\1\0" +
                    "\1\11\1\1\1\0\1\1\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private final java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    private boolean zzEOFDone;

    /* user code: */
    _NuXmvLexer() {
        this(null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    _NuXmvLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                switch (zzLexicalState) {
                    case IN_BLOCK_COMMENT: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }  // fall though
                    case 513:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 169:
                        break;
                    case 2: {
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 170:
                        break;
                    case 3: {
                        return NOT;
                    }
                    // fall through
                    case 171:
                        break;
                    case 4: {
                        return AND;
                    }
                    // fall through
                    case 172:
                        break;
                    case 5: {
                        return LPAREN;
                    }
                    // fall through
                    case 173:
                        break;
                    case 6: {
                        return RPAREN;
                    }
                    // fall through
                    case 174:
                        break;
                    case 7: {
                        return MULT;
                    }
                    // fall through
                    case 175:
                        break;
                    case 8: {
                        return PLUS;
                    }
                    // fall through
                    case 176:
                        break;
                    case 9: {
                        return COMMA;
                    }
                    // fall through
                    case 177:
                        break;
                    case 10: {
                        return MINUS;
                    }
                    // fall through
                    case 178:
                        break;
                    case 11: {
                        return DOT;
                    }
                    // fall through
                    case 179:
                        break;
                    case 12: {
                        return DIV;
                    }
                    // fall through
                    case 180:
                        break;
                    case 13: {
                        return POSITIVE_INTEGER_NUMBER;
                    }
                    // fall through
                    case 181:
                        break;
                    case 14: {
                        return COLON;
                    }
                    // fall through
                    case 182:
                        break;
                    case 15: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 183:
                        break;
                    case 16: {
                        return LESS;
                    }
                    // fall through
                    case 184:
                        break;
                    case 17: {
                        return EQUALITY;
                    }
                    // fall through
                    case 185:
                        break;
                    case 18: {
                        return GREATER;
                    }
                    // fall through
                    case 186:
                        break;
                    case 19: {
                        return QUESTION_MARK;
                    }
                    // fall through
                    case 187:
                        break;
                    case 20: {
                        return CTL_FORALL;
                    }
                    // fall through
                    case 188:
                        break;
                    case 21: {
                        return IDENTIFIER;
                    }
                    // fall through
                    case 189:
                        break;
                    case 22: {
                        return CTL_EXISTS;
                    }
                    // fall through
                    case 190:
                        break;
                    case 23: {
                        return LTL_FINALLY;
                    }
                    // fall through
                    case 191:
                        break;
                    case 24: {
                        return LTL_GLOBALLY;
                    }
                    // fall through
                    case 192:
                        break;
                    case 25: {
                        return LTL_HISTORICALLY;
                    }
                    // fall through
                    case 193:
                        break;
                    case 26: {
                        return LTL_SINCE;
                    }
                    // fall through
                    case 194:
                        break;
                    case 27: {
                        return LTL_TRIGGERED;
                    }
                    // fall through
                    case 195:
                        break;
                    case 28: {
                        return TL_UNTIL;
                    }
                    // fall through
                    case 196:
                        break;
                    case 29: {
                        return LTL_RELEASES;
                    }
                    // fall through
                    case 197:
                        break;
                    case 30: {
                        return LTL_NEXT;
                    }
                    // fall through
                    case 198:
                        break;
                    case 31: {
                        return LTL_PREVIOUS;
                    }
                    // fall through
                    case 199:
                        break;
                    case 32: {
                        return LTL_NOT_PREVIOUS;
                    }
                    // fall through
                    case 200:
                        break;
                    case 33: {
                        return LBRACKET;
                    }
                    // fall through
                    case 201:
                        break;
                    case 34: {
                        return RBRACKET;
                    }
                    // fall through
                    case 202:
                        break;
                    case 35: {
                        return LBRACE;
                    }
                    // fall through
                    case 203:
                        break;
                    case 36: {
                        return OR;
                    }
                    // fall through
                    case 204:
                        break;
                    case 37: {
                        return RBRACE;
                    }
                    // fall through
                    case 205:
                        break;
                    case 38: {
                    }
                    // fall through
                    case 206:
                        break;
                    case 39: {
                        return NOT_EQUALITY;
                    }
                    // fall through
                    case 207:
                        break;
                    case 40: {
                        return LINE_COMMENT;
                    }
                    // fall through
                    case 208:
                        break;
                    case 41: {
                        return INTEGER_NUMBER;
                    }
                    // fall through
                    case 209:
                        break;
                    case 42: {
                        return IMPLICATION;
                    }
                    // fall through
                    case 210:
                        break;
                    case 43: {
                        return RANGE;
                    }
                    // fall through
                    case 211:
                        break;
                    case 44: {
                        return HEX_NUMBER;
                    }
                    // fall through
                    case 212:
                        break;
                    case 45: {
                        return CONCAT;
                    }
                    // fall through
                    case 213:
                        break;
                    case 46: {
                        return ASSIGN;
                    }
                    // fall through
                    case 214:
                        break;
                    case 47: {
                        return SHIFT_LEFT;
                    }
                    // fall through
                    case 215:
                        break;
                    case 48: {
                        return LESS_EQ;
                    }
                    // fall through
                    case 216:
                        break;
                    case 49: {
                        return GREATER_EQ;
                    }
                    // fall through
                    case 217:
                        break;
                    case 50: {
                        return SHIFT_RIGHT;
                    }
                    // fall through
                    case 218:
                        break;
                    case 51: {
                        return CTL_FORALL_FINALLY;
                    }
                    // fall through
                    case 219:
                        break;
                    case 52: {
                        return CTL_FORALL_NEXT;
                    }
                    // fall through
                    case 220:
                        break;
                    case 53: {
                        return CTL_FORALL_GLOBALLY;
                    }
                    // fall through
                    case 221:
                        break;
                    case 54: {
                        return RTCTL_BU;
                    }
                    // fall through
                    case 222:
                        break;
                    case 55: {
                        return CTL_EXISTS_FINALLY;
                    }
                    // fall through
                    case 223:
                        break;
                    case 56: {
                        return CTL_EXISTS_GLOBALLY;
                    }
                    // fall through
                    case 224:
                        break;
                    case 57: {
                        return CTL_EXISTS_NEXT;
                    }
                    // fall through
                    case 225:
                        break;
                    case 58: {
                        return IN_KW;
                    }
                    // fall through
                    case 226:
                        break;
                    case 59: {
                        return IN;
                    }
                    // fall through
                    case 227:
                        break;
                    case 60: {
                        return LN_FUN;
                    }
                    // fall through
                    case 228:
                        break;
                    case 61: {
                        return ARRAY_OF;
                    }
                    // fall through
                    case 229:
                        break;
                    case 62: {
                        yybegin(IN_BLOCK_COMMENT);
                        yypushback(3);
                    }
                    // fall through
                    case 230:
                        break;
                    case 63: {
                        return FLOAT_NUMBER;
                    }
                    // fall through
                    case 231:
                        break;
                    case 64: {
                        return EXPONENTIAL_NUMBER;
                    }
                    // fall through
                    case 232:
                        break;
                    case 65: {
                        return EQUIVALENCE;
                    }
                    // fall through
                    case 233:
                        break;
                    case 66: {
                        return LTL_AT_NEXT;
                    }
                    // fall through
                    case 234:
                        break;
                    case 67: {
                        return LTL_AT_LAST;
                    }
                    // fall through
                    case 235:
                        break;
                    case 68: {
                        return RTCTL_ABF;
                    }
                    // fall through
                    case 236:
                        break;
                    case 69: {
                        return RTCTL_ABG;
                    }
                    // fall through
                    case 237:
                        break;
                    case 70: {
                        return RTCTL_EBF;
                    }
                    // fall through
                    case 238:
                        break;
                    case 71: {
                        return RTCTL_EBG;
                    }
                    // fall through
                    case 239:
                        break;
                    case 72: {
                        return FUN_KW;
                    }
                    // fall through
                    case 240:
                        break;
                    case 73: {
                        return ISA_KW;
                    }
                    // fall through
                    case 241:
                        break;
                    case 74: {
                        return MAX_KW;
                    }
                    // fall through
                    case 242:
                        break;
                    case 75: {
                        return MIN_KW;
                    }
                    // fall through
                    case 243:
                        break;
                    case 76: {
                        return SAT_KW;
                    }
                    // fall through
                    case 244:
                        break;
                    case 77: {
                        return VAR_KW;
                    }
                    // fall through
                    case 245:
                        break;
                    case 78: {
                        return ABS_FUN;
                    }
                    // fall through
                    case 246:
                        break;
                    case 79: {
                        return COS_FUN;
                    }
                    // fall through
                    case 247:
                        break;
                    case 80: {
                        return EXP_FUN;
                    }
                    // fall through
                    case 248:
                        break;
                    case 81: {
                        return MAX_FUN;
                    }
                    // fall through
                    case 249:
                        break;
                    case 82: {
                        return MIN_FUN;
                    }
                    // fall through
                    case 250:
                        break;
                    case 83: {
                        return MOD;
                    }
                    // fall through
                    case 251:
                        break;
                    case 84: {
                        return POW_FUN;
                    }
                    // fall through
                    case 252:
                        break;
                    case 85: {
                        return SIN_FUN;
                    }
                    // fall through
                    case 253:
                        break;
                    case 86: {
                        return TAN_FUN;
                    }
                    // fall through
                    case 254:
                        break;
                    case 87: {
                        return XOR;
                    }
                    // fall through
                    case 255:
                        break;
                    case 88: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }
                    // fall through
                    case 256:
                        break;
                    case 89: {
                        return END_MACRO_KW;
                    }
                    // fall through
                    case 257:
                        break;
                    case 90: {
                        return FOR_MACRO_KW;
                    }
                    // fall through
                    case 258:
                        break;
                    case 91: {
                        return INIT_KW;
                    }
                    // fall through
                    case 259:
                        break;
                    case 92: {
                        return IVAR_KW;
                    }
                    // fall through
                    case 260:
                        break;
                    case 93: {
                        return NAME_KW;
                    }
                    // fall through
                    case 261:
                        break;
                    case 94: {
                        return REAL_KW;
                    }
                    // fall through
                    case 262:
                        break;
                    case 95: {
                        return SPEC_KW;
                    }
                    // fall through
                    case 263:
                        break;
                    case 96: {
                        return TRUE_KW;
                    }
                    // fall through
                    case 264:
                        break;
                    case 97: {
                        return WORD_KW;
                    }
                    // fall through
                    case 265:
                        break;
                    case 98: {
                        return ACOS_FUN;
                    }
                    // fall through
                    case 266:
                        break;
                    case 99: {
                        return ASIN_FUN;
                    }
                    // fall through
                    case 267:
                        break;
                    case 100: {
                        return ATAN_FUN;
                    }
                    // fall through
                    case 268:
                        break;
                    case 101: {
                        return TO_BOOL_FUN;
                    }
                    // fall through
                    case 269:
                        break;
                    case 102: {
                        return CASE_KW;
                    }
                    // fall through
                    case 270:
                        break;
                    case 103: {
                        return ESAC_KW;
                    }
                    // fall through
                    case 271:
                        break;
                    case 104: {
                        return INIT_FUN;
                    }
                    // fall through
                    case 272:
                        break;
                    case 105: {
                        return NEXT_FUN;
                    }
                    // fall through
                    case 273:
                        break;
                    case 106: {
                        return REAL_TYPE;
                    }
                    // fall through
                    case 274:
                        break;
                    case 107: {
                        return SELF_KW;
                    }
                    // fall through
                    case 275:
                        break;
                    case 108: {
                        return SQRT_FUN;
                    }
                    // fall through
                    case 276:
                        break;
                    case 109: {
                        return WORD_TYPE;
                    }
                    // fall through
                    case 277:
                        break;
                    case 110: {
                        return NOT_XOR;
                    }
                    // fall through
                    case 278:
                        break;
                    case 111: {
                        return WORD;
                    }
                    // fall through
                    case 279:
                        break;
                    case 112: {
                        return CLOCK_KW;
                    }
                    // fall through
                    case 280:
                        break;
                    case 113: {
                        return FALSE_KW;
                    }
                    // fall through
                    case 281:
                        break;
                    case 114: {
                        return FRACTIONAL_NUMBER;
                    }
                    // fall through
                    case 282:
                        break;
                    case 115: {
                        return INVAR_KW;
                    }
                    // fall through
                    case 283:
                        break;
                    case 116: {
                        return ITYPE_KW;
                    }
                    // fall through
                    case 284:
                        break;
                    case 117: {
                        return TRANS_KW;
                    }
                    // fall through
                    case 285:
                        break;
                    case 118: {
                        return VALID_KW;
                    }
                    // fall through
                    case 286:
                        break;
                    case 119: {
                        return ARRAY_TYPE;
                    }
                    // fall through
                    case 287:
                        break;
                    case 120: {
                        return CLOCK_TYPE;
                    }
                    // fall through
                    case 288:
                        break;
                    case 121: {
                        return COUNT_FUN;
                    }
                    // fall through
                    case 289:
                        break;
                    case 122: {
                        return FLOOR_FUN;
                    }
                    // fall through
                    case 290:
                        break;
                    case 123: {
                        return TO_INT_FUN;
                    }
                    // fall through
                    case 291:
                        break;
                    case 124: {
                        return UNION;
                    }
                    // fall through
                    case 292:
                        break;
                    case 125: {
                        return TO_WORD1_FUN;
                    }
                    // fall through
                    case 293:
                        break;
                    case 126: {
                        return ASSIGN_KW;
                    }
                    // fall through
                    case 294:
                        break;
                    case 127: {
                        return COMPID_KW;
                    }
                    // fall through
                    case 295:
                        break;
                    case 128: {
                        return CTLWFF_KW;
                    }
                    // fall through
                    case 296:
                        break;
                    case 129: {
                        return DEFINE_KW;
                    }
                    // fall through
                    case 297:
                        break;
                    case 130: {
                        return LTLWFF_KW;
                    }
                    // fall through
                    case 298:
                        break;
                    case 131: {
                        return MIRROR_KW;
                    }
                    // fall through
                    case 299:
                        break;
                    case 132: {
                        return MODULE_KW;
                    }
                    // fall through
                    case 300:
                        break;
                    case 133: {
                        return URGENT_KW;
                    }
                    // fall through
                    case 301:
                        break;
                    case 134: {
                        return EXTEND_FUN;
                    }
                    // fall through
                    case 302:
                        break;
                    case 135: {
                        return RESIZE_FUN;
                    }
                    // fall through
                    case 303:
                        break;
                    case 136: {
                        return TO_SIGNED_FUN;
                    }
                    // fall through
                    case 304:
                        break;
                    case 137: {
                        return SIZEOF_FUN;
                    }
                    // fall through
                    case 305:
                        break;
                    case 138: {
                        return COMPUTE_KW;
                    }
                    // fall through
                    case 306:
                        break;
                    case 139: {
                        return COMPWFF_KW;
                    }
                    // fall through
                    case 307:
                        break;
                    case 140: {
                        return CTLSPEC_KW;
                    }
                    // fall through
                    case 308:
                        break;
                    case 141: {
                        return INTEGER_KW;
                    }
                    // fall through
                    case 309:
                        break;
                    case 142: {
                        return JUSTICE_KW;
                    }
                    // fall through
                    case 310:
                        break;
                    case 143: {
                        return LTLSPEC_KW;
                    }
                    // fall through
                    case 311:
                        break;
                    case 144: {
                        return MDEFINE_KW;
                    }
                    // fall through
                    case 312:
                        break;
                    case 145: {
                        return MONONEG_KW;
                    }
                    // fall through
                    case 313:
                        break;
                    case 146: {
                        return MONOPOS_KW;
                    }
                    // fall through
                    case 314:
                        break;
                    case 147: {
                        return NEXTWFF_KW;
                    }
                    // fall through
                    case 315:
                        break;
                    case 148: {
                        return PSLSPEC_KW;
                    }
                    // fall through
                    case 316:
                        break;
                    case 149: {
                        return SIMPWFF_KW;
                    }
                    // fall through
                    case 317:
                        break;
                    case 150: {
                        return BOOLEAN_TYPE;
                    }
                    // fall through
                    case 318:
                        break;
                    case 151: {
                        return INTEGER_TYPE;
                    }
                    // fall through
                    case 319:
                        break;
                    case 152: {
                        return SWCONST_FUN;
                    }
                    // fall through
                    case 320:
                        break;
                    case 153: {
                        return UWCONST_FUN;
                    }
                    // fall through
                    case 321:
                        break;
                    case 154: {
                        return FAIRNESS_KW;
                    }
                    // fall through
                    case 322:
                        break;
                    case 155: {
                        return PARSYNTH_KW;
                    }
                    // fall through
                    case 323:
                        break;
                    case 156: {
                        return TO_UNSIGNED_FUN;
                    }
                    // fall through
                    case 324:
                        break;
                    case 157: {
                        return CONSTANTS_KW;
                    }
                    // fall through
                    case 325:
                        break;
                    case 158: {
                        return FROZENVAR_KW;
                    }
                    // fall through
                    case 326:
                        break;
                    case 159: {
                        return INVARSPEC_KW;
                    }
                    // fall through
                    case 327:
                        break;
                    case 160: {
                        return COMPASSION_KW;
                    }
                    // fall through
                    case 328:
                        break;
                    case 161: {
                        return CONSTRAINT_KW;
                    }
                    // fall through
                    case 329:
                        break;
                    case 162: {
                        return PREDICATES_KW;
                    }
                    // fall through
                    case 330:
                        break;
                    case 163: {
                        return LTL_TIME_SINCE;
                    }
                    // fall through
                    case 331:
                        break;
                    case 164: {
                        return LTL_TIME_UNTIL;
                    }
                    // fall through
                    case 332:
                        break;
                    case 165: {
                        return SIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 333:
                        break;
                    case 166: {
                        return TIME_DOMAIN_KW;
                    }
                    // fall through
                    case 334:
                        break;
                    case 167: {
                        return NONCONTINUOUS_KW;
                    }
                    // fall through
                    case 335:
                        break;
                    case 168: {
                        return UNSIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 336:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
