// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: nuXmv.flex

/* JFlex specification for nuXmv lexer */

package dev.mikhailshad.nuxmvplugin.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static dev.mikhailshad.nuxmvplugin.language.psi.NuXmvTypes.*;


class _NuXmvLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int IN_BLOCK_COMMENT = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\37\u0100\1\u0200\u10df\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\0\1\2\22\0\1\3\1\4" +
                    "\1\0\2\5\1\0\1\6\1\0\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\10\17" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\1\37\1\42\1\43\1\44\1\45\1\46\1\37" +
                    "\1\47\1\50\1\51\1\52\1\53\1\37\1\54\1\37" +
                    "\1\55\1\56\1\0\1\57\1\0\1\37\1\0\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\37\1\67" +
                    "\1\37\1\70\1\71\1\72\1\73\1\74\2\37\1\75" +
                    "\1\76\1\77\1\100\1\37\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\u019b\0\1\110\346\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[768];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\1\16\24\1\25\1\26" +
                    "\17\24\1\27\1\30\1\31\2\32\1\33\1\34\1\35" +
                    "\1\36\1\37\2\0\2\40\1\41\1\42\1\0\1\43" +
                    "\1\44\1\45\1\46\1\0\7\24\1\0\25\24\1\47" +
                    "\2\24\1\50\10\24\1\0\1\51\1\52\1\0\1\53" +
                    "\1\54\1\0\10\24\1\55\1\0\2\24\1\56\3\24" +
                    "\1\57\1\60\7\24\1\61\12\24\1\62\12\24\1\63" +
                    "\1\64\1\53\1\0\10\24\1\0\1\65\1\24\1\66" +
                    "\4\24\1\67\1\70\1\71\1\24\1\72\1\24\1\73" +
                    "\1\74\2\24\1\75\2\24\1\76\1\24\1\77\1\100" +
                    "\1\24\1\101\4\24\1\102\1\103\1\0\6\24\1\104" +
                    "\1\24\1\105\1\106\4\24\1\107\1\110\1\24\1\111" +
                    "\1\112\1\24\1\113\3\24\1\114\1\115\1\24\1\116" +
                    "\1\0\1\117\3\24\1\120\2\24\1\0\3\24\1\121" +
                    "\1\122\1\24\1\123\1\24\1\124\1\125\1\24\1\0" +
                    "\2\24\1\126\3\24\1\127\1\130\1\131\1\132\1\0" +
                    "\1\24\1\0\2\24\1\133\2\24\1\0\1\134\1\0" +
                    "\1\24\1\135\1\136\1\137\3\0\1\140\3\0\1\141" +
                    "\1\0\1\142\1\0\1\143";

    private static int[] zzUnpackAction() {
        int[] result = new int[302];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\111\0\222\0\333\0\u0124\0\222\0\222\0\222" +
                    "\0\222\0\222\0\222\0\u016d\0\u01b6\0\u01ff\0\u0248\0\u0291" +
                    "\0\222\0\u02da\0\222\0\u0323\0\222\0\u036c\0\u03b5\0\u03fe" +
                    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646" +
                    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\222\0\222\0\u07b3\0\u07fc" +
                    "\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44" +
                    "\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\222\0\222\0\222" +
                    "\0\222\0\u0bfa\0\222\0\u0c43\0\u0c8c\0\222\0\222\0\u0cd5" +
                    "\0\u0d1e\0\u0d67\0\u0db0\0\222\0\222\0\u0df9\0\222\0\222" +
                    "\0\222\0\222\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf" +
                    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7" +
                    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f" +
                    "\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687" +
                    "\0\u16d0\0\u1719\0\u1762\0\u03fe\0\u17ab\0\u17f4\0\u183d\0\u1886" +
                    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\222\0\u0d1e\0\u1a3c" +
                    "\0\u1a85\0\222\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b" +
                    "\0\u1c84\0\u1ccd\0\u1d16\0\u03fe\0\u1d5f\0\u1da8\0\u1df1\0\u03fe" +
                    "\0\u1e3a\0\u1e83\0\u1ecc\0\u03fe\0\u03fe\0\u1f15\0\u1f5e\0\u1fa7" +
                    "\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u03fe\0\u2114\0\u215d\0\u21a6" +
                    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u03fe" +
                    "\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed" +
                    "\0\u2636\0\u267f\0\u03fe\0\222\0\u1a3c\0\u26c8\0\u2711\0\u275a" +
                    "\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u03fe" +
                    "\0\u29a2\0\u03fe\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u03fe\0\u03fe" +
                    "\0\u03fe\0\u2b0f\0\u03fe\0\u2b58\0\u2ba1\0\u03fe\0\u2bea\0\u2c33" +
                    "\0\u03fe\0\u2c7c\0\u2cc5\0\u03fe\0\u2d0e\0\u03fe\0\u03fe\0\u2d57" +
                    "\0\u03fe\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u03fe\0\u2f0d" +
                    "\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u03fe\0\u310c" +
                    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u03fe\0\u03fe" +
                    "\0\u330b\0\u03fe\0\u03fe\0\u3354\0\u03fe\0\u339d\0\u33e6\0\u342f" +
                    "\0\u03fe\0\u03fe\0\u3478\0\u03fe\0\u34c1\0\u03fe\0\u350a\0\u3553" +
                    "\0\u359c\0\u03fe\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752" +
                    "\0\u03fe\0\u03fe\0\u379b\0\u03fe\0\u37e4\0\u03fe\0\u382d\0\u3876" +
                    "\0\u38bf\0\u3908\0\u3951\0\u03fe\0\u399a\0\u39e3\0\u3a2c\0\u03fe" +
                    "\0\u03fe\0\u03fe\0\u03fe\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99" +
                    "\0\u03fe\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u03fe" +
                    "\0\u03fe\0\u03fe\0\u3d98\0\u3de1\0\u3e2a\0\u03fe\0\u3e73\0\u3ebc" +
                    "\0\u3f05\0\222\0\u3f4e\0\222\0\u3f97\0\222";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[302];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\3\4\1\5\1\3\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\30\1\33\2\30\1\34\1\35\1\36\1\37" +
                    "\1\40\1\30\1\41\1\30\1\42\1\43\1\30\1\44" +
                    "\2\30\1\45\1\46\1\47\1\50\1\51\1\30\1\52" +
                    "\1\53\1\30\1\54\2\30\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\2\30\1\66\1\67" +
                    "\1\70\1\3\14\71\1\72\74\71\112\0\3\4\131\0" +
                    "\1\73\100\0\1\74\2\0\2\75\4\0\1\76\100\0" +
                    "\1\77\107\0\1\100\111\0\1\101\1\0\2\17\7\0" +
                    "\4\102\1\103\1\102\22\0\4\102\1\103\1\102\44\0" +
                    "\1\104\2\0\1\105\100\0\1\106\6\0\1\107\1\110" +
                    "\110\0\1\111\1\112\134\0\1\113\44\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\20\30\1\114\5\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\15\30\1\115\3\30\1\116\4\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\4\30\1\117\21\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\1\120\16\30\1\121\2\30" +
                    "\1\122\3\30\2\0\25\30\3\0\1\123\5\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\14\30\1\124\3\30" +
                    "\1\125\2\30\1\126\2\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\22\30\1\127\3\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\21\30\1\130\4\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\1\131\7\30\1\132" +
                    "\4\30\1\133\10\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\1\134\25\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\17\30" +
                    "\1\135\6\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\16\30\1\136\7\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\17\30" +
                    "\1\137\6\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\1\140\25\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\15\30\1\141\7\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\14\30\1\142\10\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\1\143\10\30\1\144\2\30\1\145\10\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\16\30" +
                    "\1\146\3\30\1\147\2\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\11\30\1\150\13\30" +
                    "\3\0\1\123\5\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\13\30\1\151\11\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\14\30" +
                    "\1\152\10\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\4\30\1\153\20\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\5\30" +
                    "\1\154\17\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\4\30\1\155\20\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\4\30" +
                    "\1\156\2\30\1\157\15\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\14\30\1\160\10\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\13\30\1\161\11\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\14\30\1\162\10\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\13\30\1\163\1\164\10\30\20\0\1\165\74\0" +
                    "\2\74\1\0\106\74\17\0\2\75\104\0\1\166\113\0" +
                    "\2\167\107\0\2\102\7\0\6\102\22\0\6\102\37\0" +
                    "\1\170\2\0\2\171\7\0\6\102\22\0\6\102\50\0" +
                    "\1\172\123\0\1\173\55\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\20\30\1\174\5\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\13\30\1\175" +
                    "\1\176\11\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\12\30\1\177\13\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\5\30" +
                    "\1\200\20\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\10\30\1\201\1\30\1\202\13\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\15\30\1\203\10\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\14\30\1\204\11\30" +
                    "\2\0\25\30\23\0\2\205\75\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\10\30\1\206\12\30\1\207\2\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\1\210\25\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\1\211\25\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\20\30" +
                    "\1\212\5\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\12\30\1\213\13\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\24\30" +
                    "\1\214\1\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\14\30\1\215\2\30\1\216\6\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\3\30\1\217\22\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\13\30\1\220\12\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\4\30\1\221\21\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\4\30\1\222\21\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\1\223\21\30\1\224\3\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\17\30\1\225" +
                    "\6\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\15\30\1\226\7\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\14\30\1\227\10\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\16\30\1\230\6\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\14\30\1\231\10\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\20\30\1\232\4\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\1\233\24\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\17\30\1\234\5\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\14\30" +
                    "\1\235\10\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\7\30\1\236\7\30\1\237\5\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\3\30\1\240\21\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\22\30\1\241\2\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\1\242\15\30\1\243\6\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\26\30\2\0\11\30\1\244" +
                    "\13\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\6\30\1\245\16\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\26\30\2\0\7\30\1\246" +
                    "\15\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\7\30\1\247\6\30\1\250\6\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\15\30\1\251\7\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\14\30\1\252\10\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\15\30\1\253\7\30\22\0\1\254\111\0\2\255\107\0" +
                    "\2\171\7\0\6\102\22\0\6\102\66\0\1\256\52\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\10\30\1\257" +
                    "\15\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\16\30\1\260\7\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\20\30\1\261" +
                    "\5\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\20\30\1\262\5\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\10\30\1\263" +
                    "\15\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\17\30\1\264\6\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\20\30\1\265" +
                    "\5\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\25\30\1\266\2\0\25\30\22\0\1\267" +
                    "\2\205\75\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\21\30\1\270\4\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\1\271\25\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\17\30" +
                    "\1\272\6\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\21\30\1\273\4\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\20\30" +
                    "\1\274\5\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\17\30\1\275\6\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\22\30" +
                    "\1\276\3\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\4\30\1\277\21\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\3\30" +
                    "\1\300\22\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\2\30\1\301\23\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\14\30" +
                    "\1\302\11\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\4\30\1\303\21\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\1\304\24\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\11\30\1\305\13\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\4\30\1\306\20\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\2\30\1\307\22\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\13\30\1\310\11\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\2\30\1\311\22\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\4\30\1\312\20\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\14\30\1\313\10\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\17\30\1\314\5\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\4\30\1\315\20\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\17\30\1\316\5\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\11\30\1\317\13\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\7\30\1\320\15\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\5\30\1\321\17\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\13\30\1\322\11\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\13\30\1\323\11\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\14\30\1\324\10\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\7\30\1\325\15\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\3\30\1\326\21\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\15\30\1\327\7\30\40\0" +
                    "\1\330\61\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\6\30\1\331\17\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\1\332\25\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\21\30" +
                    "\1\333\4\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\16\30\1\334\7\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\14\30" +
                    "\1\335\11\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\14\30\1\336\11\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\4\30" +
                    "\1\337\21\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\4\30\1\340\21\30\2\0\25\30" +
                    "\23\0\2\341\75\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\17\30\1\342\6\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\10\30\1\343\15\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\16\30\1\344\7\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\15\30\1\345\10\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\12\30\1\346\13\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\20\30\1\347\5\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\23\30\1\350\1\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\4\30" +
                    "\1\351\20\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\10\30\1\352\14\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\17\30" +
                    "\1\353\5\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\13\30\1\354\11\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\15\30" +
                    "\1\355\7\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\6\30\1\356\16\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\24\30" +
                    "\1\357\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\4\30\1\360\20\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\26\30\2\0\17\30\1\361" +
                    "\5\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\13\30\1\362\11\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\26\30\2\0\6\30\1\363" +
                    "\16\30\11\0\1\30\6\0\1\30\2\0\1\30\1\364" +
                    "\7\0\26\30\2\0\25\30\7\0\1\365\112\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\14\30\1\366\11\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\20\30\1\367\5\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\1\370\25\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\4\30\1\371\21\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\4\30\1\372\21\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\4\30\1\373\21\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\14\30\1\374\11\30\2\0" +
                    "\25\30\23\0\2\341\13\0\1\375\27\0\1\375\31\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\20\30\1\376" +
                    "\5\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\2\30\1\377\23\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\4\30\1\u0100" +
                    "\21\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\17\30\1\u0101\6\30\2\0\25\30\11\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\4\30\1\u0102" +
                    "\21\30\2\0\25\30\11\0\1\30\6\0\1\30\2\0" +
                    "\2\30\7\0\26\30\2\0\1\u0103\24\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\3\30" +
                    "\1\u0104\21\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\4\30\1\u0105\20\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\4\30" +
                    "\1\u0106\20\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\3\30\1\u0107\21\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\26\30\2\0\13\30" +
                    "\1\u0108\11\30\37\0\1\u0109\62\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\20\30\1\u010a\5\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\14\30" +
                    "\1\u010b\11\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\2\30\1\u010c\23\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\20\30" +
                    "\1\u010d\5\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\23\30\1\u010e\2\30\2\0\25\30" +
                    "\20\0\1\170\2\0\2\255\75\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\16\30\1\u010f\7\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\4\30" +
                    "\1\u0110\21\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\2\30\1\u0111\23\30\2\0\25\30" +
                    "\11\0\1\30\6\0\1\30\2\0\2\30\7\0\26\30" +
                    "\2\0\13\30\1\u0112\11\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\15\30\1\u0113\7\30" +
                    "\7\0\1\u0114\1\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\26\30\2\0\25\30\11\0\1\30\6\0\1\30" +
                    "\2\0\2\30\7\0\26\30\2\0\4\30\1\u0115\20\30" +
                    "\51\0\1\u0116\50\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\10\30\1\u0117\15\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\21\30\1\u0118\4\30" +
                    "\2\0\25\30\11\0\1\30\6\0\1\30\2\0\2\30" +
                    "\7\0\20\30\1\u0119\5\30\2\0\25\30\11\0\1\30" +
                    "\6\0\1\30\2\0\2\30\7\0\1\u011a\25\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\4\30\1\u011b\21\30\2\0\25\30\105\0\1\u011c\14\0" +
                    "\1\30\6\0\1\30\2\0\2\30\7\0\26\30\2\0" +
                    "\3\30\1\u011d\21\30\47\0\1\u011e\52\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\15\30\1\u011f\10\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\20\30\1\u0120\5\30\2\0\25\30\11\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\17\30\1\u0121\6\30\2\0" +
                    "\25\30\11\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\2\30\1\u0122\23\30\2\0\25\30\100\0\1\u0123\17\0" +
                    "\1\u0124\1\0\1\30\6\0\1\30\2\0\2\30\7\0" +
                    "\26\30\2\0\25\30\34\0\1\u0125\65\0\1\30\6\0" +
                    "\1\30\2\0\2\30\7\0\14\30\1\u0126\11\30\2\0" +
                    "\25\30\101\0\1\u0127\114\0\1\u0128\47\0\1\u0129\133\0" +
                    "\1\u012a\121\0\1\u012b\60\0\1\u012c\141\0\1\u012d\76\0" +
                    "\1\u012e\25\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[16352];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\2\1\6\11\5\1\1\11\1\1\1\11" +
                    "\1\1\1\11\17\1\2\11\17\1\4\11\1\1\1\11" +
                    "\2\1\2\11\2\0\2\1\2\11\1\0\4\11\1\0" +
                    "\7\1\1\0\41\1\1\0\1\11\1\1\1\0\1\1" +
                    "\1\11\1\0\11\1\1\0\46\1\1\11\1\1\1\0" +
                    "\10\1\1\0\40\1\1\0\34\1\1\0\7\1\1\0" +
                    "\13\1\1\0\12\1\1\0\1\1\1\0\5\1\1\0" +
                    "\1\1\1\0\4\1\3\0\1\1\3\0\1\11\1\0" +
                    "\1\11\1\0\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[302];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private final java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    private boolean zzEOFDone;

    /* user code: */
    _NuXmvLexer() {
        this(null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    _NuXmvLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                switch (zzLexicalState) {
                    case IN_BLOCK_COMMENT: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }  // fall though
                    case 303:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 100:
                        break;
                    case 2: {
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 101:
                        break;
                    case 3: {
                        return NOT;
                    }
                    // fall through
                    case 102:
                        break;
                    case 4: {
                        return AND;
                    }
                    // fall through
                    case 103:
                        break;
                    case 5: {
                        return LPAREN;
                    }
                    // fall through
                    case 104:
                        break;
                    case 6: {
                        return RPAREN;
                    }
                    // fall through
                    case 105:
                        break;
                    case 7: {
                        return MULT;
                    }
                    // fall through
                    case 106:
                        break;
                    case 8: {
                        return PLUS;
                    }
                    // fall through
                    case 107:
                        break;
                    case 9: {
                        return COMMA;
                    }
                    // fall through
                    case 108:
                        break;
                    case 10: {
                        return MINUS;
                    }
                    // fall through
                    case 109:
                        break;
                    case 11: {
                        return DOT;
                    }
                    // fall through
                    case 110:
                        break;
                    case 12: {
                        return DIV;
                    }
                    // fall through
                    case 111:
                        break;
                    case 13: {
                        return POSITIVE_INTEGER_NUMBER;
                    }
                    // fall through
                    case 112:
                        break;
                    case 14: {
                        return COLON;
                    }
                    // fall through
                    case 113:
                        break;
                    case 15: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 114:
                        break;
                    case 16: {
                        return LESS;
                    }
                    // fall through
                    case 115:
                        break;
                    case 17: {
                        return EQUALITY;
                    }
                    // fall through
                    case 116:
                        break;
                    case 18: {
                        return GREATER;
                    }
                    // fall through
                    case 117:
                        break;
                    case 19: {
                        return QUESTION_MARK;
                    }
                    // fall through
                    case 118:
                        break;
                    case 20: {
                        return IDENTIFIER;
                    }
                    // fall through
                    case 119:
                        break;
                    case 21: {
                        return LBRACKET;
                    }
                    // fall through
                    case 120:
                        break;
                    case 22: {
                        return RBRACKET;
                    }
                    // fall through
                    case 121:
                        break;
                    case 23: {
                        return LBRACE;
                    }
                    // fall through
                    case 122:
                        break;
                    case 24: {
                        return OR;
                    }
                    // fall through
                    case 123:
                        break;
                    case 25: {
                        return RBRACE;
                    }
                    // fall through
                    case 124:
                        break;
                    case 26: {
                    }
                    // fall through
                    case 125:
                        break;
                    case 27: {
                        return NOT_EQUALITY;
                    }
                    // fall through
                    case 126:
                        break;
                    case 28: {
                        return LINE_COMMENT;
                    }
                    // fall through
                    case 127:
                        break;
                    case 29: {
                        return INTEGER_NUMBER;
                    }
                    // fall through
                    case 128:
                        break;
                    case 30: {
                        return IMPLICATION;
                    }
                    // fall through
                    case 129:
                        break;
                    case 31: {
                        return RANGE;
                    }
                    // fall through
                    case 130:
                        break;
                    case 32: {
                        return HEX_NUMBER;
                    }
                    // fall through
                    case 131:
                        break;
                    case 33: {
                        return CONCAT;
                    }
                    // fall through
                    case 132:
                        break;
                    case 34: {
                        return ASSIGN;
                    }
                    // fall through
                    case 133:
                        break;
                    case 35: {
                        return SHIFT_LEFT;
                    }
                    // fall through
                    case 134:
                        break;
                    case 36: {
                        return LESS_EQ;
                    }
                    // fall through
                    case 135:
                        break;
                    case 37: {
                        return GREATER_EQ;
                    }
                    // fall through
                    case 136:
                        break;
                    case 38: {
                        return SHIFT_RIGHT;
                    }
                    // fall through
                    case 137:
                        break;
                    case 39: {
                        return IN;
                    }
                    // fall through
                    case 138:
                        break;
                    case 40: {
                        return ARRAY_OF;
                    }
                    // fall through
                    case 139:
                        break;
                    case 41: {
                        yybegin(IN_BLOCK_COMMENT);
                        yypushback(3);
                    }
                    // fall through
                    case 140:
                        break;
                    case 42: {
                        return FLOAT_NUMBER;
                    }
                    // fall through
                    case 141:
                        break;
                    case 43: {
                        return EXPONENTIAL_NUMBER;
                    }
                    // fall through
                    case 142:
                        break;
                    case 44: {
                        return EQUIVALENCE;
                    }
                    // fall through
                    case 143:
                        break;
                    case 45: {
                        return FUN_KW;
                    }
                    // fall through
                    case 144:
                        break;
                    case 46: {
                        return ISA_KW;
                    }
                    // fall through
                    case 145:
                        break;
                    case 47: {
                        return MAX_KW;
                    }
                    // fall through
                    case 146:
                        break;
                    case 48: {
                        return MIN_KW;
                    }
                    // fall through
                    case 147:
                        break;
                    case 49: {
                        return VAR;
                    }
                    // fall through
                    case 148:
                        break;
                    case 50: {
                        return MOD;
                    }
                    // fall through
                    case 149:
                        break;
                    case 51: {
                        return XOR;
                    }
                    // fall through
                    case 150:
                        break;
                    case 52: {
                        yybegin(YYINITIAL);
                        return BLOCK_COMMENT;
                    }
                    // fall through
                    case 151:
                        break;
                    case 53: {
                        return INIT_KW;
                    }
                    // fall through
                    case 152:
                        break;
                    case 54: {
                        return IVAR;
                    }
                    // fall through
                    case 153:
                        break;
                    case 55: {
                        return NAME_KW;
                    }
                    // fall through
                    case 154:
                        break;
                    case 56: {
                        return PRED_KW;
                    }
                    // fall through
                    case 155:
                        break;
                    case 57: {
                        return SPEC;
                    }
                    // fall through
                    case 156:
                        break;
                    case 58: {
                        return TRUE;
                    }
                    // fall through
                    case 157:
                        break;
                    case 59: {
                        return TO_BOOL;
                    }
                    // fall through
                    case 158:
                        break;
                    case 60: {
                        return CASE;
                    }
                    // fall through
                    case 159:
                        break;
                    case 61: {
                        return ESAC;
                    }
                    // fall through
                    case 160:
                        break;
                    case 62: {
                        return INIT_FUN;
                    }
                    // fall through
                    case 161:
                        break;
                    case 63: {
                        return NEXT;
                    }
                    // fall through
                    case 162:
                        break;
                    case 64: {
                        return REAL_TYPE;
                    }
                    // fall through
                    case 163:
                        break;
                    case 65: {
                        return SELF;
                    }
                    // fall through
                    case 164:
                        break;
                    case 66: {
                        return WORD_TYPE;
                    }
                    // fall through
                    case 165:
                        break;
                    case 67: {
                        return NOT_XOR;
                    }
                    // fall through
                    case 166:
                        break;
                    case 68: {
                        return FALSE;
                    }
                    // fall through
                    case 167:
                        break;
                    case 69: {
                        return FRACTIONAL_NUMBER;
                    }
                    // fall through
                    case 168:
                        break;
                    case 70: {
                        return INVAR_KW;
                    }
                    // fall through
                    case 169:
                        break;
                    case 71: {
                        return TRANS_KW;
                    }
                    // fall through
                    case 170:
                        break;
                    case 72: {
                        return ARRAY_TYPE;
                    }
                    // fall through
                    case 171:
                        break;
                    case 73: {
                        return CLOCK_TYPE;
                    }
                    // fall through
                    case 172:
                        break;
                    case 74: {
                        return COUNT;
                    }
                    // fall through
                    case 173:
                        break;
                    case 75: {
                        return FLOOR;
                    }
                    // fall through
                    case 174:
                        break;
                    case 76: {
                        return TO_INT;
                    }
                    // fall through
                    case 175:
                        break;
                    case 77: {
                        return UNION;
                    }
                    // fall through
                    case 176:
                        break;
                    case 78: {
                        return TO_WORD1;
                    }
                    // fall through
                    case 177:
                        break;
                    case 79: {
                        return ASSIGN_KW;
                    }
                    // fall through
                    case 178:
                        break;
                    case 80: {
                        return DEFINE_KW;
                    }
                    // fall through
                    case 179:
                        break;
                    case 81: {
                        return MIRROR_KW;
                    }
                    // fall through
                    case 180:
                        break;
                    case 82: {
                        return MODULE;
                    }
                    // fall through
                    case 181:
                        break;
                    case 83: {
                        return EXTEND;
                    }
                    // fall through
                    case 182:
                        break;
                    case 84: {
                        return RESIZE;
                    }
                    // fall through
                    case 183:
                        break;
                    case 85: {
                        return TO_SIGNED;
                    }
                    // fall through
                    case 184:
                        break;
                    case 86: {
                        return CTLSPEC;
                    }
                    // fall through
                    case 185:
                        break;
                    case 87: {
                        return JUSTICE_KW;
                    }
                    // fall through
                    case 186:
                        break;
                    case 88: {
                        return LTLSPEC;
                    }
                    // fall through
                    case 187:
                        break;
                    case 89: {
                        return BOOLEAN_TYPE;
                    }
                    // fall through
                    case 188:
                        break;
                    case 90: {
                        return INTEGER_TYPE;
                    }
                    // fall through
                    case 189:
                        break;
                    case 91: {
                        return FAIRNESS_KW;
                    }
                    // fall through
                    case 190:
                        break;
                    case 92: {
                        return TO_UNSIGNED;
                    }
                    // fall through
                    case 191:
                        break;
                    case 93: {
                        return CONSTANTS_KW;
                    }
                    // fall through
                    case 192:
                        break;
                    case 94: {
                        return FROZENVAR;
                    }
                    // fall through
                    case 193:
                        break;
                    case 95: {
                        return INVARSPEC;
                    }
                    // fall through
                    case 194:
                        break;
                    case 96: {
                        return COMPASSION_KW;
                    }
                    // fall through
                    case 195:
                        break;
                    case 97: {
                        return SIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 196:
                        break;
                    case 98: {
                        return TIME_DOMAIN_KW;
                    }
                    // fall through
                    case 197:
                        break;
                    case 99: {
                        return UNSIGNED_WORD_TYPE;
                    }
                    // fall through
                    case 198:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
