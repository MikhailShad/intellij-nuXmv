{
  parserClass="dev.mikhailshad.nuxmvplugin.language.parser.NuXmvParser"
  parserUtilClass="dev.mikhailshad.nuxmvplugin.language.parser.NuXmvParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="NuXmv"
  psiImplClassSuffix="Impl"
  psiPackage="dev.mikhailshad.nuxmvplugin.language.psi"
  psiImplPackage="dev.mikhailshad.nuxmvplugin.language.psi.impl"

  psiImplUtilClass="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPsiUtils"

  elementTypeHolderClass="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvTypes"
  elementTypeClass="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvElementType"
  tokenTypeClass="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvTokenType"

  tokens=[
    WHITESPACE      ='regexp:\s+'
    BLOCK_COMMENT   = 'regexp:/--(.|\r|\n)*--/'
    LINE_COMMENT    = 'regexp:--[^\r\n]*'

    NOT             = '!'
    AND             = '&'
    OR              = '|'
    XOR             = 'xor'
    NOT_XOR         = 'xnor'
    IMPLICATION     = '->'
    EQUIVALENCE     = '<->'
    EQUALITY        = '='
    NOT_EQUALITY    = '!='
    LESS            = '<'
    GREATER         = '>'
    LESS_EQ         = '<='
    GREATER_EQ      = '>='

    ASSIGN          = ':='

    MINUS           = '-'
    PLUS            = '+'
    MULT            = '*'
    DIV             = '/'
    MOD             = 'mod'

    SHIFT_RIGHT     = '>>'
    SHIFT_LEFT      = '<<'

    LPAREN          = '('
    RPAREN          = ')'
    LBRACE          = '{'
    RBRACE          = '}'
    LBRACKET        = '['
    RBRACKET        = ']'
    DOT             = '.'
    COMMA           = ','
    SEMICOLON       = ';'
    COLON           = ':'
    RANGE           = '..'
    CONCAT          = '::'
    QUOTES          = '"'

    UNION           = 'union'
    IN              = 'in'
    QUESTION_MARK   = '?'

    // Type Specifier
    BOOLEAN_TYPE        = 'boolean'
    WORD_TYPE           = 'word'
    UNSIGNED_WORD_TYPE  = 'unsigned word'
    SIGNED_WORD_TYPE    = 'signed word'
    INTEGER_TYPE        = 'integer'
    REAL_TYPE           = 'real'
    CLOCK_TYPE          = 'clock'
    ARRAY_TYPE          = 'array'
    ARRAY_OF            = 'of'

    // State, Input, Frozen Variables
    VAR_KW           = 'VAR'
    IVAR_KW          = 'IVAR'
    FROZENVAR_KW     = 'FROZENVAR'

    // Timed Logic Specific Keywords
    TL_UNTIL     = 'U'

    // LTL Specific Keywords
    LTLSPEC_KW          = 'LTLSPEC'
    LTL_AT_NEXT         = '@F~'
    LTL_AT_LAST         = '@O~'
    LTL_NEXT            = 'X'
    LTL_GLOBALLY        = 'G'
    LTL_FINALLY         = 'F'
    LTL_RELEASES        = 'V'
    LTL_PREVIOUS        = 'Y'
    LTL_NOT_PREVIOUS    = 'Z'
    LTL_HISTORICALLY    = 'H'
    LTL_ONCE            = 'O'
    LTL_SINCE           = 'S'
    LTL_TRIGGERED       = 'T'
    LTL_TIME_SINCE      = 'time_since'
    LTL_TIME_UNTIL      = 'time_until'

    // CTL Specific Keywords
    CTLSPEC_KW          = 'CTLSPEC'
    SPEC_KW             = 'SPEC'
    CTL_FORALL          = 'A'
    CTL_EXISTS          = 'E'
    CTL_EXISTS_GLOBALLY = 'EG'
    CTL_EXISTS_NEXT     = 'EX'
    CTL_EXISTS_FINALLY  = 'EF'
    CTL_FORALL_GLOBALLY = 'AX'
    CTL_FORALL_NEXT     = 'AG'
    CTL_FORALL_FINALLY  = 'AF'
    RTCTL_EBF           = 'EBF'
    RTCTL_ABF           = 'ABF'
    RTCTL_EBG           = 'EBG'
    RTCTL_ABG           = 'ABG'
    RTCTL_BU            = 'BU'

    // Built-in Functions
    INIT_FUN                = 'init'
    NEXT_FUN                = 'next'
    ABS_FUN                 = 'abs'
    MAX_FUN                 = 'max'
    MIN_FUN                 = 'min'
    SIN_FUN                 = 'sin'
    COS_FUN                 = 'cos'
    EXP_FUN                 = 'exp'
    TAN_FUN                 = 'tan'
    LN_FUN                  = 'ln'
    POW_FUN                 = 'pow'
    ASIN_FUN                = 'asin'
    ACOS_FUN                = 'acos'
    ATAN_FUN                = 'atan'
    SQRT_FUN                = 'sqrt'
    TO_WORD1_FUN            = 'word1'
    TO_BOOL_FUN             = 'bool'
    TO_INT_FUN              = 'toint'
    COUNT_FUN               = 'count'
    SWCONST_FUN             = 'swconst'
    UWCONST_FUN             = 'uwconst'
    TO_SIGNED_FUN           = 'signed'
    TO_UNSIGNED_FUN         = 'unsigned'
    SIZEOF_FUN              = 'sizeof'
    FLOOR_FUN               = 'floor'
    EXTEND_FUN              = 'extend'
    RESIZE_FUN              = 'resize'
    TO_SIGNED_WORD_FUN      = 'signed word[N]'
    TO_UNSIGNED_WORD_FUN    = 'unsigned word[N]'
    READ_FUN                = 'READ'
    WRITE_FUN               = 'WRITE'
    CONSTARRAY_FUN          = 'CONSTARRAY'
    TYPE_OF_FUN             = 'typeof'

    // Other Reserved Keywords
    INVARSPEC_KW        = 'INVARSPEC'
    PSLSPEC_KW          = 'PSLSPEC'
    MODULE_KW           = 'MODULE'
    SELF_KW             = 'self'
    TRUE_KW             = 'TRUE'
    FALSE_KW            = 'FALSE'
    FUN_KW              = 'FUN'
    DEFINE_KW           = 'DEFINE'
    CONSTANTS_KW        = 'CONSTANTS'
    ASSIGN_KW           = 'ASSIGN'
    INIT_KW             = "INIT"
    TRANS_KW            = "TRANS"
    INVAR_KW            = "INVAR"
    FAIRNESS_KW         = "FAIRNESS"
    JUSTICE_KW          = "JUSTICE"
    COMPASSION_KW       = "COMPASSION"
    TIME_DOMAIN_KW      = "@TIME DOMAIN"
    PRED_KW             = "PRED"
    MIRROR_KW           = "MIRROR"
    ISA_KW              = "ISA"
    NAME_KW             = "NAME"
    COMPUTE_KW          = "COMPUTE"
    MIN_KW              = "MIN"
    MAX_KW              = "MAX"
    PARSYNTH_KW         = "PARSYNTH"
    VALID_KW            = "VALID"
    SAT_KW              = "SAT"
    MONOPOS_KW          = "MONOPOS"
    MONONEG_KW          = "MONONEG"
    CASE_KW             = 'case'
    ESAC_KW             = 'esac'
    CLOCK_KW            = 'Clock'
    COMPID_KW           = 'COMPID'
    COMPWFF_KW          = 'COMPWFF'
    CONSTRAINT_KW       = 'CONSTRAINT'
    CTLWFF_KW           = 'CTLWFF'
    IN_KW               = 'IN'
    INTEGER_KW          = 'Integer'
    ITYPE_KW            = 'ITYPE'
    LTLWFF_KW           = 'LTLWFF'
    MDEFINE_KW          = 'MDEFINE'
    NEXTWFF_KW          = 'NEXTWFF'
    NONCONTINUOUS_KW    = 'noncontinuous'
    PREDICATES_KW       = 'PREDICATES'
    REAL_KW             = 'Real'
    SIMPWFF_KW          = 'SIMPWFF'
    URGENT_KW           = 'URGENT'
    WORD_KW             = 'Word'

    IDENTIFIER = "regexp:[A-Za-z_][A-Za-z_0-9$\-#]*"
    WORD = "regexp:(0[us][bBdDoOhH][0-9]*_[0-9a-fA-F]+})"
    INTEGER_NUMBER = "regexp:-?[0-9]+"
    HEX_NUMBER = "regexp:([0-9a-fA-F]+)"
    FLOAT_NUMBER = "regexp:[0-9]+\.[0-9]+"
    FRACTIONAL_NUMBER = "regexp:[fF]'[0-9]+/[0-9]+"
    EXPONENTIAL_NUMBER = "regexp:([0-9]+|[0-9]+/[0-9]+)[eE](-?[0-9]+)"
    POSITIVE_INTEGER_NUMBER = "regexp:[0-9]+"
  ]

  extends(".*Expr")=Expr
}

/*
CODE FORMATTING
===============
- tokens are in ALL_CAPS
- grammar rules are in CamelCase
- meta rules and recoverWhile predicates should be in snake_case
 */

File ::= !<<eof>> Module+ {pin=1}
Module ::= ModuleDeclaration ModuleBody?
ModuleDeclaration ::= MODULE_KW ModuleName (LPAREN ModuleParameter (COMMA ModuleParameter)* RPAREN)? {
    pin=1
}
ModuleName ::= SimpleIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvNamedElementMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}
ModuleParameter ::= SimpleIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvNamedElementMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}
ModuleBody ::= ModuleElement+
private ModuleElement ::= VarDeclaration
    | IvarDeclaration
    | FrozenVarDeclaration
    | FunctionDeclaration
    | DefineDeclaration
    | ConstantsDeclaration
    | AssignConstraint
    | TransConstraint
    | InitConstraint
    | InvarConstraint
    | FairnessConstraint
    | JusticeConstraint
    | CompassionConstraint
    | CtlSpecification
    | LtlSpecification
    | InvarSpecification
    | ComputeSpecification
    | ParameterSynthProblemDeclaration
    | IsaDeclaration
    | PredDeclaration
    | MirrorDeclaration
    {recoverWhile=module_element_recover}

private module_element_recover ::= !(
    SEMICOLON | RBRACKET | RPAREN
    | VAR_KW | IVAR_KW | FROZENVAR_KW
    | DEFINE_KW | CONSTANTS_KW | ASSIGN_KW | TRANS_KW | INIT_KW | INVAR_KW | COMPASSION_KW | FAIRNESS_KW | JUSTICE_KW
    | LTLSPEC_KW | CTLSPEC_KW | SPEC_KW | INVARSPEC_KW
    | COMPUTE_KW | PARSYNTH_KW
    | ISA_KW | PRED_KW | MIRROR_KW
    | MODULE_KW
    )

CtlSpecification ::= CtlSpecKeyWord NamedSpecification? Expr SEMICOLON? {
    pin=1
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvCtlSpecificationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}
private CtlSpecKeyWord ::= CTLSPEC_KW | SPEC_KW

LtlSpecification ::= LTLSPEC_KW NamedSpecification? Expr SEMICOLON? {
    pin=1
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvLtlSpecificationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}

InvarSpecification ::= INVARSPEC_KW NamedSpecification? Expr SEMICOLON? {
    pin=1
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvInvarSpecificationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}

NamedSpecification ::=  NAME_KW SimpleIdentifier ASSIGN {
    mixin ="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NamedSpecificationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}

VarDeclaration ::= VAR_KW SingleVarDeclaration+ {pin=1}
SingleVarDeclaration ::= VarName COLON TypeSpecifier SEMICOLON {
    pin=2
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvSingleVarDeclarationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}

IvarDeclaration ::= IVAR_KW SingleIvarDeclaration+ {pin=1}
SingleIvarDeclaration ::= VarName COLON SimpleTypeSpecifier SEMICOLON {
    pin=2
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvSingleIvarDeclarationMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}

FrozenVarDeclaration ::= FROZENVAR_KW SingleIvarDeclaration+ {pin=1}
VarName ::= QUOTES ComplexIdentifier QUOTES | ComplexIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvVarNameMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}

FunctionDeclaration ::= FUN_KW FunctionSpecification+ {pin=1}
FunctionSpecification ::= FunctionName COLON FunctionTypeSpecifier SEMICOLON {pin=2}
FunctionName ::= ComplexIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvNamedElementMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}
FunctionTypeSpecifier ::= FunctionArgTypesSpecifier IMPLICATION SimpleTypeSpecifier
FunctionArgTypesSpecifier ::= SimpleTypeSpecifier (MULT SimpleTypeSpecifier)*

DefineDeclaration ::= DEFINE_KW DefineBody+ {pin=1}
DefineBody ::= DefineName ASSIGN Expr SEMICOLON {
    pin=2
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvDefineBodyMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
}
DefineName ::= ComplexIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvNamedElementMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}

ConstantsDeclaration ::= CONSTANTS_KW Constant (COMMA Constant)* SEMICOLON {pin=1}
Constant ::= ComplexIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvConstantMixin"
    implements=[
        "dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
        "dev.mikhailshad.nuxmvplugin.language.psi.NuXmvPresentableElement"
    ]
}

AssignConstraint ::= ASSIGN_KW SingleAssignConstraint+ {pin=1}
SingleAssignConstraint ::= AssignExpr SEMICOLON {pin=1}
private AssignExpr ::= InitAssignExpr | NextAssignExpr | SimpleAssignExpr
SimpleAssignExpr ::= IdentifierUsage ASSIGN Expr {pin = 1}
InitAssignExpr ::= INIT_FUN LPAREN IdentifierUsage RPAREN ASSIGN Expr {pin=1}
NextAssignExpr ::= NEXT_FUN LPAREN IdentifierUsage RPAREN ASSIGN Expr {pin=1}

TransConstraint ::= TRANS_KW Expr SEMICOLON? {pin=1}

InitConstraint ::= INIT_KW Expr SEMICOLON? {pin=1}

InvarConstraint ::= INVAR_KW Expr (IMPLICATION Expr)? SEMICOLON? {pin=1}

FairnessConstraint ::= FAIRNESS_KW Expr SEMICOLON? {pin=1}
JusticeConstraint ::= JUSTICE_KW Expr SEMICOLON? {pin=1}
CompassionConstraint ::= COMPASSION_KW LPAREN Expr COMMA Expr RPAREN SEMICOLON? {pin=1}

IsaDeclaration ::= ISA_KW IDENTIFIER {pin=1}

PredDeclaration ::= PRED_KW [LESS Expr GREATER ASSIGN] Expr SEMICOLON? {pin=1}

ComputeSpecification ::= COMPUTE_KW ComputeExpr SEMICOLON?
    | COMPUTE_KW NAME_KW identifier ASSIGN ComplexIdentifier SEMICOLON? {pin=1}
ComputeExpr ::= (MIN_KW | MAX_KW) LBRACKET RtCtlExpr COMMA RtCtlExpr RBRACKET
RtCtlExpr ::= Expr
    | (RTCTL_EBF | RTCTL_ABF | RTCTL_EBG | RTCTL_ABG) RangeConstant RtCtlExpr
    | (CTL_FORALL | CTL_EXISTS) LBRACKET RtCtlExpr RTCTL_BU RtCtlExpr RBRACKET

// parameter_synth_problem
ParameterSynthProblemDeclaration ::= PARSYNTH_KW ParameterSynthProblem SEMICOLON? {pin=1}
ParameterSynthProblem ::= identifier ASSIGN LBRACE IdList OR [VALID_KW | SAT_KW] Expr SynthOpts RBRACE
IdList ::= identifier (COMMA identifier)*
SynthOpts ::= SynthOpt (COMMA SynthOpt)*
SynthOpt ::= MONONEG_KW
    | MONOPOS_KW
    | (MIN_KW | MAX_KW) LPAREN Expr RPAREN {pin=1}

MirrorDeclaration ::= MIRROR_KW VarName SEMICOLON? {pin=1}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////////////////////////

TypeSpecifier ::= ModuleTypeSpecifier | SimpleTypeSpecifier
SimpleTypeSpecifier ::= BOOLEAN_TYPE
    | WordType
    | UNSIGNED_WORD_TYPE LBRACKET WholeNumber RBRACKET
    | SIGNED_WORD_TYPE LBRACKET WholeNumber RBRACKET
    | IntegerType
    | REAL_TYPE
    | CLOCK_TYPE
    | LBRACE EnumerationTypeBody RBRACE
    | RangeConstant
    | ARRAY_TYPE RangeConstant ARRAY_OF SimpleTypeSpecifier
    | ARRAY_TYPE WordType ARRAY_OF SimpleTypeSpecifier
    | ARRAY_TYPE IntegerType ARRAY_OF SimpleTypeSpecifier
    | SimpleIdentifier // TODO: что-то придумать с проверкой, что тип корректный
    {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvSimpleTypeSpecifierMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.type.TypeResolvable"
}
private WordType ::= (WORD_TYPE | UNSIGNED_WORD_TYPE | SIGNED_WORD_TYPE) LBRACKET WholeNumber RBRACKET
private IntegerType ::= INTEGER_TYPE
EnumerationTypeBody ::= EnumerationTypeValue (COMMA EnumerationTypeValue)*
EnumerationTypeValue ::= WholeNumber | ComplexIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvEnumValueMixin"
    implements="dev.mikhailshad.nuxmvplugin.language.psi.NuXmvNamedElement"
}
ModuleTypeSpecifier ::= SimpleIdentifier ParameterList
ParameterList ::= LPAREN [Expr (COMMA Expr)*] RPAREN

///////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////////////////////////

Expr ::= ImplicationBasicExpr
    | EquivalenceBasicExpr
    | TernaryBasicExpr
    | BooleanOrBasicExprGroup
    | AndBasicExpr
    | ComparisonBasicExprGroup
    | InBasicExpr
    | UnionBasicExpr
    | ShiftBasicExprGroup
    | AddBasicExprGroup
    | MulBasicExprGroup
    | ConcatBasicExpr
    | UnaryMinusBasicExpr
    | LogicalNotBasicExpr
    | IndexBasicExpr
    | CaseBasicExpr
    | FunctionCallBasicExpr
    | CtlExprGroup
    | LtlExprGroup
    | PrimaryBasicExprGroup

CaseBasicExpr ::= CASE_KW RegularCaseBody+ ESAC_KW {pin=1}
RegularCaseBody ::= Expr COLON Expr SEMICOLON {pin=2}
TernaryBasicExpr ::= Expr QUESTION_MARK Expr COLON Expr {pin=2}

private ComparisonBasicExprGroup ::= LessBasicExpr | GreaterBasicExpr | LessEqBasicExpr | GreaterEqBasicExpr | EqualityBasicExpr | NotEqualityBasicExpr
LessBasicExpr ::= Expr LESS Expr
GreaterBasicExpr ::= Expr GREATER Expr
LessEqBasicExpr ::= Expr LESS_EQ Expr
GreaterEqBasicExpr ::= Expr GREATER_EQ Expr
EqualityBasicExpr ::= Expr EQUALITY Expr
NotEqualityBasicExpr ::= Expr NOT_EQUALITY Expr

ConcatBasicExpr ::= Expr CONCAT Expr
UnionBasicExpr ::= Expr UNION Expr
InBasicExpr ::= Expr IN Expr

ImplicationBasicExpr ::= Expr IMPLICATION Expr {rightAssociative = true}
EquivalenceBasicExpr ::= Expr EQUIVALENCE Expr
private BooleanOrBasicExprGroup ::= OrBasicExpr | XorBasicExpr | NotXorBasicExpr
OrBasicExpr ::= Expr OR Expr
XorBasicExpr ::= Expr XOR Expr
NotXorBasicExpr ::= Expr NOT_XOR Expr
AndBasicExpr ::= Expr AND Expr

private AddBasicExprGroup ::= PlusBasicExpr | MinusBasicExpr
PlusBasicExpr ::= Expr PLUS Expr
MinusBasicExpr ::= Expr MINUS Expr

private MulBasicExprGroup ::= MulBasicExpr | DivBasicExpr | ModBasicExpr
MulBasicExpr ::= Expr MULT Expr
DivBasicExpr ::= Expr DIV Expr
ModBasicExpr ::= Expr MOD Expr

private ShiftBasicExprGroup ::= ShiftLeftBasicExpr | ShiftRightBasicExpr
ShiftLeftBasicExpr ::= Expr SHIFT_LEFT Expr
ShiftRightBasicExpr ::= Expr SHIFT_RIGHT Expr

LogicalNotBasicExpr ::= NOT Expr
UnaryMinusBasicExpr ::= MINUS Expr

IndexBasicExpr ::= Expr LBRACKET WholeNumber (SEMICOLON WholeNumber)? RBRACKET {pin=2}

FunctionCallBasicExpr ::= FunctionNameUsage LPAREN BasicExprList RPAREN  {pin=2}
FunctionNameUsage ::= INIT_FUN|NEXT_FUN|ABS_FUN|MAX_FUN|MIN_FUN|SIN_FUN|COS_FUN
    |EXP_FUN|TAN_FUN|LN_FUN|POW_FUN|ASIN_FUN|ACOS_FUN|ATAN_FUN|SQRT_FUN
    |TO_WORD1_FUN|TO_BOOL_FUN|TO_INT_FUN|COUNT_FUN|SWCONST_FUN|UWCONST_FUN
    |TO_SIGNED_FUN|TO_UNSIGNED_FUN|SIZEOF_FUN|FLOOR_FUN|EXTEND_FUN|RESIZE_FUN
    |TO_SIGNED_WORD_FUN|TO_UNSIGNED_WORD_FUN|READ_FUN|WRITE_FUN|CONSTARRAY_FUN|TYPE_OF_FUN
    | SimpleIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvFunctionNameUsageMixin"
}
BasicExprList ::= Expr (COMMA Expr)* {pin(".*")=1}

///////////////////////////////////////////////////////////////////////////////////////////////////
// CTL SPEC
///////////////////////////////////////////////////////////////////////////////////////////////////
private CtlExprGroup ::= UnaryCtlExpr
    | UntilCtlExpr
UnaryCtlExpr ::= UnaryCtlOp Expr
private UnaryCtlOp ::= CTL_EXISTS_GLOBALLY | CTL_EXISTS_NEXT | CTL_EXISTS_FINALLY
    | CTL_FORALL_GLOBALLY | CTL_FORALL_NEXT | CTL_FORALL_FINALLY
UntilCtlExpr ::= UntilCtlOp LBRACKET Expr TL_UNTIL Expr RBRACKET
private UntilCtlOp ::= CTL_EXISTS | CTL_FORALL

///////////////////////////////////////////////////////////////////////////////////////////////////
// LTL SPEC
///////////////////////////////////////////////////////////////////////////////////////////////////
private LtlExprGroup ::= UnaryLtlExpr
    | BinaryLtlExpr
    | TimedLtlExpr
UnaryLtlExpr ::= UnaryLtlOp Expr
UnaryLtlOp ::= LTL_ONCE | LTL_HISTORICALLY | LTL_NOT_PREVIOUS| LTL_PREVIOUS | LTL_FINALLY | LTL_GLOBALLY | LTL_NEXT
BinaryLtlExpr ::= Expr BinaryLtlOp Expr
BinaryLtlOp ::= LTL_AT_LAST | LTL_AT_NEXT | LTL_TRIGGERED | LTL_SINCE | LTL_RELEASES | TL_UNTIL
TimedLtlExpr ::= TimeLtlOp LPAREN Expr RPAREN
TimeLtlOp ::= LTL_TIME_SINCE | LTL_TIME_UNTIL

private PrimaryBasicExprGroup ::= ReferenceBasicExpr | LiteralBasicExpr | ParenthesisBasicExpr
ParenthesisBasicExpr ::= LPAREN Expr RPAREN
LiteralBasicExpr ::= BooleanConstant
    | WholeNumber
    | RealNumber
    | WordConstant
    | RangeConstant
    | BuiltInConstant
BooleanConstant ::= TRUE_KW | FALSE_KW
WordConstant ::= WORD
RangeConstant ::= WholeNumber RANGE WholeNumber
WholeNumber ::= POSITIVE_INTEGER_NUMBER | INTEGER_NUMBER
RealNumber ::= FLOAT_NUMBER | FRACTIONAL_NUMBER | EXPONENTIAL_NUMBER
BuiltInConstant ::= TIME | PI
ReferenceBasicExpr ::= IdentifierUsage
IdentifierUsage ::= ComplexIdentifier | SimpleIdentifier {
    mixin="dev.mikhailshad.nuxmvplugin.language.psi.mixin.NuXmvIdentifierUsageMixin"
}
private ComplexIdentifier ::= BaseIdentifier (DOT SimpleIdentifier) * (LBRACKET Expr RBRACKET)?
private BaseIdentifier ::= SimpleIdentifier | SELF_KW
private SimpleIdentifier ::= IDENTIFIER
