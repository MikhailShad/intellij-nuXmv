package dev.mikhailshad.nuxmvplugin.language.lexer

import com.intellij.lexer.Lexer
import com.intellij.testFramework.LexerTestCase

class NuXmvLexerAdapterTest : LexerTestCase() {
    fun testExample() {
        doTest(
            """
            MODULE main
            IVAR
                d: real;
            VAR
                state: {s0, s1};
                res: real;
            ASSIGN
                init(state) := s0;
                next(state) := case
                    state = s0 & res >= 0.10 : s1;
                    state = s1 & res >= 0.20 : s0;
                    TRUE : state;
                esac;
                next(t) := case
                    state = s0 & res < 0.1 : res + d;
                    state = s1 & res < 0.2 : res + d;
                    TRUE: 0.0;
                esac;
            INIT
                res >= 0.0
            TRANS
                (state = s0 -> (d >= 0 & d <= 0.01)) &
                (state = s1 -> (d >= 0 & d <= 0.02))
            INVARSPEC res <= 0.3;
        """.trimIndent(),
            """
                NuXmvTokenType.MODULE ('MODULE')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('main')
                WHITE_SPACE ('\n')
                NuXmvTokenType.IVAR ('IVAR')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.identifier ('d')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.real ('real')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n')
                NuXmvTokenType.VAR ('VAR')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.identifier ('state')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.{ ('{')
                NuXmvTokenType.identifier ('s0')
                NuXmvTokenType., (',')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s1')
                NuXmvTokenType.} ('}')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.identifier ('res')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.real ('real')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n')
                NuXmvTokenType.ASSIGN ('ASSIGN')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.init ('init')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('state')
                NuXmvTokenType.) (')')
                WHITE_SPACE (' ')
                NuXmvTokenType.:= (':=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s0')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.next ('next')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('state')
                NuXmvTokenType.) (')')
                WHITE_SPACE (' ')
                NuXmvTokenType.:= (':=')
                WHITE_SPACE (' ')
                NuXmvTokenType.case ('case')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s0')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.>= ('>=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.10')
                WHITE_SPACE (' ')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s1')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s1')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.>= ('>=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.20')
                WHITE_SPACE (' ')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s0')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.TRUE ('TRUE')
                WHITE_SPACE (' ')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('state')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.esac ('esac')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.next ('next')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('t')
                NuXmvTokenType.) (')')
                WHITE_SPACE (' ')
                NuXmvTokenType.:= (':=')
                WHITE_SPACE (' ')
                NuXmvTokenType.case ('case')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s0')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.< ('<')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.1')
                WHITE_SPACE (' ')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.+ ('+')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('d')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s1')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.< ('<')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.2')
                WHITE_SPACE (' ')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.+ ('+')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('d')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n        ')
                NuXmvTokenType.TRUE ('TRUE')
                NuXmvTokenType.: (':')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.0')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.esac ('esac')
                NuXmvTokenType.; (';')
                WHITE_SPACE ('\n')
                NuXmvTokenType.INIT ('INIT')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.>= ('>=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.0')
                WHITE_SPACE ('\n')
                NuXmvTokenType.TRANS ('TRANS')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s0')
                WHITE_SPACE (' ')
                NuXmvTokenType.-> ('->')
                WHITE_SPACE (' ')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('d')
                WHITE_SPACE (' ')
                NuXmvTokenType.>= ('>=')
                WHITE_SPACE (' ')
                NuXmvTokenType.POSITIVE_INTEGER_NUMBER ('0')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('d')
                WHITE_SPACE (' ')
                NuXmvTokenType.<= ('<=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.01')
                NuXmvTokenType.) (')')
                NuXmvTokenType.) (')')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE ('\n    ')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('state')
                WHITE_SPACE (' ')
                NuXmvTokenType.= ('=')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('s1')
                WHITE_SPACE (' ')
                NuXmvTokenType.-> ('->')
                WHITE_SPACE (' ')
                NuXmvTokenType.( ('(')
                NuXmvTokenType.identifier ('d')
                WHITE_SPACE (' ')
                NuXmvTokenType.>= ('>=')
                WHITE_SPACE (' ')
                NuXmvTokenType.POSITIVE_INTEGER_NUMBER ('0')
                WHITE_SPACE (' ')
                NuXmvTokenType.& ('&')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('d')
                WHITE_SPACE (' ')
                NuXmvTokenType.<= ('<=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.02')
                NuXmvTokenType.) (')')
                NuXmvTokenType.) (')')
                WHITE_SPACE ('\n')
                NuXmvTokenType.INVARSPEC ('INVARSPEC')
                WHITE_SPACE (' ')
                NuXmvTokenType.identifier ('res')
                WHITE_SPACE (' ')
                NuXmvTokenType.<= ('<=')
                WHITE_SPACE (' ')
                NuXmvTokenType.FLOAT_NUMBER ('0.3')
                NuXmvTokenType.; (';')
            """.trimIndent()
        )
    }

    override fun createLexer(): Lexer = NuXmvLexerAdapter()

    override fun getDirPath(): String = "src/test/testData/parser"
}
